<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孙军雨的技术博客</title>
  
  <subtitle>总得有点追求，别太安于现状</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sun-junyu.github.io/"/>
  <updated>2020-05-07T03:40:47.772Z</updated>
  <id>https://sun-junyu.github.io/</id>
  
  <author>
    <name>孙军雨的技术博客</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>美好的一天</title>
    <link href="https://sun-junyu.github.io/posts/7e709362/"/>
    <id>https://sun-junyu.github.io/posts/7e709362/</id>
    <published>2020-05-07T03:36:11.000Z</published>
    <updated>2020-05-07T03:40:47.772Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟（密码：123456）！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="ebddac76135ac2f5d9ed740eb1a80a79008ee74bf2a028b9de0d1c2db44eef59"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="日记" scheme="https://Sun-JunYu.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="https://Sun-JunYu.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>最新win10专业版密钥激活</title>
    <link href="https://sun-junyu.github.io/posts/915b7b32/"/>
    <id>https://sun-junyu.github.io/posts/915b7b32/</id>
    <published>2020-05-05T14:10:43.000Z</published>
    <updated>2020-05-07T03:26:58.352Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最新win10专业版密钥激活"><a href="#最新win10专业版密钥激活" class="headerlink" title="最新win10专业版密钥激活"></a>最新win10专业版密钥激活</h1><p>win10专业版密钥激活</p><p>1、查看激活状态，win按键》设置（左下角倒数第二个）》更新和安全》激活———提示没有有效密钥，需要激活</p><a id="more"></a><p>2、管理员身份打开cmd，搜索框输入cmd，以管理员身份运行</p><p><img src="https://images2018.cnblogs.com/blog/1213411/201808/1213411-20180802092106396-569978267.png" alt="img"></p><p>3、卸载产品密钥：执行命令— <strong>slmgr.vbs /upk</strong>   并弹出窗口显为“已成功卸载了产品密钥”；</p><p>4、安装产品密钥：执行命令— *<em>slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX   *</em>并弹出窗口提示：“成功的安装了产品密钥”；</p><p>5、修改指定名称：执行命令— *<em>slmgr /skms zh.us.to   *</em>并弹出窗口提示：“密钥管理服务计算机名成功的设置为zh.us.to”；</p><p>6、激活所需产品：执行命令— *<em>slmgr /ato    *</em>并弹出窗口提示：“成功的激活了产品”</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;最新win10专业版密钥激活&quot;&gt;&lt;a href=&quot;#最新win10专业版密钥激活&quot; class=&quot;headerlink&quot; title=&quot;最新win10专业版密钥激活&quot;&gt;&lt;/a&gt;最新win10专业版密钥激活&lt;/h1&gt;&lt;p&gt;win10专业版密钥激活&lt;/p&gt;
&lt;p&gt;1、查看激活状态，win按键》设置（左下角倒数第二个）》更新和安全》激活———提示没有有效密钥，需要激活&lt;/p&gt;
    
    </summary>
    
    
      <category term="Windows激活教程" scheme="https://Sun-JunYu.github.io/categories/Windows%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="windows10专业版" scheme="https://Sun-JunYu.github.io/tags/windows10%E4%B8%93%E4%B8%9A%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="https://sun-junyu.github.io/posts/29dc6fe8/"/>
    <id>https://sun-junyu.github.io/posts/29dc6fe8/</id>
    <published>2020-04-29T12:10:43.000Z</published>
    <updated>2020-05-07T03:25:44.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><h2 id="一、常用命令"><a href="#一、常用命令" class="headerlink" title="一、常用命令"></a>一、常用命令</h2><ul><li><p>docker version  </p></li><li><p>docker info</p></li><li><p>docker help</p><a id="more"></a></li></ul><h2 id="二、镜像命令"><a href="#二、镜像命令" class="headerlink" title="二、镜像命令"></a>二、镜像命令</h2><h4 id="1-docker-images"><a href="#1-docker-images" class="headerlink" title="1. docker images"></a>1. docker images</h4><ul><li>功能： 列出本地主机上的镜像</li><li>各个选项说明:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY：表示镜像的仓库源</span><br><span class="line">TAG：镜像的标签</span><br><span class="line">IMAGE ID：镜像ID</span><br><span class="line">CREATED：镜像创建时间</span><br><span class="line">SIZE：镜像大小</span><br></pre></td></tr></table></figure><ul><li>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</li><li>如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像</li><li>OPTIONS说明：<ul><li>-a :列出本地所有的镜像（含中间映像层）</li><li>-q :只显示镜像ID。</li><li>–digests :显示镜像的摘要信息</li><li>–no-trunc :显示完整的镜像信息</li></ul></li></ul><h4 id="2-docker-search-某个XXX镜像名字"><a href="#2-docker-search-某个XXX镜像名字" class="headerlink" title="2. docker search 某个XXX镜像名字"></a>2. docker search 某个XXX镜像名字</h4><ul><li>镜像仓库：<a href="https://hub.docker.com">https://hub.docker.com</a></li><li>命令：<ul><li>docker search [OPTIONS] 镜像名字</li><li>OPTIONS说明：<ul><li>–no-trunc : 显示完整的镜像描述</li><li>-s : 列出收藏数不小于指定值的镜像。</li><li>–automated : 只列出 automated build类型的镜像；</li></ul></li></ul></li></ul><h4 id="3-docker-pull-某个XXX镜像名字"><a href="#3-docker-pull-某个XXX镜像名字" class="headerlink" title="3. docker pull 某个XXX镜像名字"></a>3. docker pull 某个XXX镜像名字</h4><ul><li>功能: 下载镜像</li><li>docker pull 镜像名字[:TAG]</li></ul><h4 id="4-docker-rmi-某个XXX镜像名字ID"><a href="#4-docker-rmi-某个XXX镜像名字ID" class="headerlink" title="4.docker rmi 某个XXX镜像名字ID"></a>4.docker rmi 某个XXX镜像名字ID</h4><ul><li>功能：删除镜像</li><li>删除单个： docker rmi -f 镜像ID</li><li>删除多个： docker rmi -f 镜像名1:TAG 镜像名2:TAG</li><li>删除全部： docker rmi -f $(docker images -qa)</li><li>作业：结合我们Git的学习心得，大家猜猜是否会有 docker commit /docker push？？</li></ul><h2 id="三、容器命令"><a href="#三、容器命令" class="headerlink" title="三、容器命令"></a>三、容器命令</h2><ul><li>有镜像才能创建容器，这是根本前提(下载一个CentOS镜像演示)<code>docker pull centos</code></li></ul><h4 id="1-新建并启动容器-docker-run-OPTIONS-IMAGE-COMMAND-ARG…"><a href="#1-新建并启动容器-docker-run-OPTIONS-IMAGE-COMMAND-ARG…" class="headerlink" title="1. 新建并启动容器 docker run [OPTIONS] IMAGE [COMMAND] [ARG…]"></a>1. 新建并启动容器 docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</h4><ul><li>OPTIONS说明（常用）：有些是一个减号，有些是两个减号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--name&#x3D;&quot;容器新名字&quot;: 为容器指定一个名称；</span><br><span class="line">-d: 后台运行容器，并返回容器ID，也即启动守护式容器；</span><br><span class="line">-i：以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line">-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">-P: 随机端口映射；</span><br><span class="line">-p: 指定端口映射，有以下四种格式</span><br><span class="line">      ip:hostPort:containerPort</span><br><span class="line">      ip::containerPort</span><br><span class="line">      hostPort:containerPort</span><br><span class="line">      containerPort</span><br></pre></td></tr></table></figure><ul><li>启动交互式容器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#使用镜像centos:latest以交互模式启动一个容器,在容器内执行&#x2F;bin&#x2F;bash命令。</span><br><span class="line">docker run -it centos &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><h4 id="2-列出当前所有正在运行的容器-docker-ps-OPTIONS"><a href="#2-列出当前所有正在运行的容器-docker-ps-OPTIONS" class="headerlink" title="2. 列出当前所有正在运行的容器 docker ps [OPTIONS]"></a>2. 列出当前所有正在运行的容器 docker ps [OPTIONS]</h4><ul><li>OPTIONS说明（常用）：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-a :列出当前所有正在运行的容器+历史上运行过的</span><br><span class="line">-l :显示最近创建的容器。</span><br><span class="line">-n：显示最近n个创建的容器。</span><br><span class="line">-q :静默模式，只显示容器编号。</span><br><span class="line">--no-trunc :不截断输出。</span><br></pre></td></tr></table></figure><h4 id="3-退出容器-两种退出方式"><a href="#3-退出容器-两种退出方式" class="headerlink" title="3. 退出容器(两种退出方式)"></a>3. 退出容器(两种退出方式)</h4><ul><li>容器停止退出 exit</li><li>容器不停止退出 ctrl+P+Q</li></ul><h4 id="4-启动容器"><a href="#4-启动容器" class="headerlink" title="4. 启动容器"></a>4. 启动容器</h4><ul><li>docker start 容器ID或者容器名</li></ul><h4 id="5-重启容器"><a href="#5-重启容器" class="headerlink" title="5. 重启容器"></a>5. 重启容器</h4><ul><li>docker restart 容器ID或者容器名</li></ul><h4 id="6-停止容器"><a href="#6-停止容器" class="headerlink" title="6. 停止容器"></a>6. 停止容器</h4><ul><li>docker stop 容器ID或者容器名</li></ul><h4 id="7-强制停止容器"><a href="#7-强制停止容器" class="headerlink" title="7. 强制停止容器"></a>7. 强制停止容器</h4><ul><li>docker kill 容器ID或者容器名</li></ul><h4 id="8-删除已停止的容器"><a href="#8-删除已停止的容器" class="headerlink" title="8. 删除已停止的容器"></a>8. 删除已停止的容器</h4><ul><li>docker rm 容器ID</li><li>一次性删除多个容器<ul><li>docker rm -f $(docker ps -a -q)</li><li>docker ps -a -q | xargs docker rm</li></ul></li></ul><h4 id="9-重点"><a href="#9-重点" class="headerlink" title="9. 重点"></a>9. 重点</h4><ul><li><p>启动守护式容器</p><ul><li>docker run -d 容器名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#使用镜像centos:latest以后台模式启动一个容器</span><br><span class="line">docker run -d centos</span><br><span class="line"> </span><br><span class="line">问题：然后docker ps -a 进行查看, 会发现容器已经退出</span><br><span class="line">很重要的要说明的一点: Docker容器后台运行,就必须有一个前台进程.</span><br><span class="line">容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。</span><br><span class="line"> </span><br><span class="line">这个是docker的机制问题,比如你的web容器,我们以nginx为例，正常情况下,我们配置启动服务只需要启动响应的service即可。例如</span><br><span class="line">service nginx start</span><br><span class="line">但是,这样做,nginx为后台进程模式运行,就导致docker前台没有运行的应用,</span><br><span class="line">这样的容器后台启动后,会立即自杀因为他觉得他没事可做了.</span><br><span class="line">所以，最佳的解决方案是,将你要运行的程序以前台进程的形式运行</span><br></pre></td></tr></table></figure></li><li><p>查看容器日志</p><ul><li>docker logs -f -t –tail 容器ID</li><li>docker run -d centos /bin/sh -c “while true;do echo hello ljj;sleep 2;done”<ul><li>-t 是加入时间戳</li><li>-f 跟随最新的日志打印</li><li>–tail 数字 显示最后多少条 –tail 数字 显示最后多少条</li></ul></li></ul></li><li><p>查看容器内运行的进程</p><ul><li>docker top 容器ID</li></ul></li><li><p>查看容器内部细节</p><ul><li>docker inspect 容器ID</li></ul></li><li><p>进入正在运行的容器并以命令行交互</p><ul><li>docker exec -it 容器ID bashShell</li><li>​</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;docker exec -it 81bb90b25582 &#x2F;bin&#x2F;bash&#96;</span><br></pre></td></tr></table></figure><ul><li>重新进入: docker attach 容器ID</li><li>上述两个区别:<ul><li>attach: 直接进入容器启动命令的终端，不会启动新的进程</li><li>exec: 是在容器中打开新的终端，并且可以启动新的进程</li><li>再次查看容器的进程：docker top 81bb90b25582</li></ul></li></ul></li><li><p>从容器内拷贝文件到主机上</p><ul><li>docker cp 容器ID:容器内路径 目的主机路径<ul><li>docker cp 81bb90b25582:/tmp/a.txt /tmp/aa.txt</li></ul></li></ul></li></ul><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p><img src="https://note.youdao.com/yws/api/personal/file/66CA64E3A32E484AA39263AAAE5EA666?method=download&shareKey=c609d43bcdd599f67076277d3a2c818f" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像</span><br><span class="line">build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像</span><br><span class="line">commit    Create a new image from a container changes   # 提交当前容器为新的镜像</span><br><span class="line">cp        Copy files&#x2F;folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line">create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器</span><br><span class="line">diff      Inspect changes on a container&#39;s filesystem   # 查看 docker 容器变化</span><br><span class="line">events    Get real time events from the server          # 从 docker 服务获取容器实时事件</span><br><span class="line">exec      Run a command in an existing container        # 在已存在的容器上运行命令</span><br><span class="line">export    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span><br><span class="line">history   Show the history of an image                  # 展示一个镜像形成历史</span><br><span class="line">images    List images                                   # 列出系统当前镜像</span><br><span class="line">import    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line">info      Display system-wide information               # 显示系统相关信息</span><br><span class="line">inspect   Return low-level information on a container   # 查看容器详细信息</span><br><span class="line">kill      Kill a running container                      # kill 指定 docker 容器</span><br><span class="line">load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]</span><br><span class="line">login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器</span><br><span class="line">logout    Log out from a Docker registry server          # 从当前 Docker registry 退出</span><br><span class="line">logs      Fetch the logs of a container                 # 输出当前容器日志信息</span><br><span class="line">port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口</span><br><span class="line">pause     Pause all processes within a container        # 暂停容器</span><br><span class="line">ps        List containers                               # 列出容器列表</span><br><span class="line">pull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">push      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">restart   Restart a running container                   # 重启运行的容器</span><br><span class="line">rm        Remove one or more containers                 # 移除一个或者多个容器</span><br><span class="line">rmi       Remove one or more images             # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span><br><span class="line">run       Run a command in a new container              # 创建一个新的容器并运行一个命令</span><br><span class="line">save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]</span><br><span class="line">search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像</span><br><span class="line">start     Start a stopped containers                    # 启动容器</span><br><span class="line">stop      Stop a running containers                     # 停止容器</span><br><span class="line">tag       Tag an image into a repository                # 给源中镜像打标签</span><br><span class="line">top       Lookup the running processes of a container   # 查看容器中运行的进程信息</span><br><span class="line">unpause   Unpause a paused container                    # 取消暂停容器</span><br><span class="line">version   Show the docker version information           # 查看 docker 版本号</span><br><span class="line">wait      Block until a container stops, then print its exit code   # 截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker常用命令&quot;&gt;&lt;a href=&quot;#Docker常用命令&quot; class=&quot;headerlink&quot; title=&quot;Docker常用命令&quot;&gt;&lt;/a&gt;Docker常用命令&lt;/h1&gt;&lt;h2 id=&quot;一、常用命令&quot;&gt;&lt;a href=&quot;#一、常用命令&quot; class=&quot;headerlink&quot; title=&quot;一、常用命令&quot;&gt;&lt;/a&gt;一、常用命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;docker version  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;docker info&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;docker help&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker命令" scheme="https://Sun-JunYu.github.io/categories/docker%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="docker命令" scheme="https://Sun-JunYu.github.io/tags/docker%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Django如何配置并实现简单注册功能</title>
    <link href="https://sun-junyu.github.io/posts/79e097c4/"/>
    <id>https://sun-junyu.github.io/posts/79e097c4/</id>
    <published>2020-04-23T04:35:34.000Z</published>
    <updated>2020-04-23T05:38:53.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django是什么？"><a href="#Django是什么？" class="headerlink" title="Django是什么？"></a>Django是什么？</h1><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MVT的软件设计模式，即模型，视图和模板。它在开发初期用于管理劳伦斯出版集团旗下的一些以新闻为主的网站。Django于2005年7月在BSD许可证下发布，它的名字来源于比利时的吉普赛爵士吉他手Django Reinhardt。</p><a id="more"></a><h1 id="为什么选择Django"><a href="#为什么选择Django" class="headerlink" title="为什么选择Django"></a>为什么选择Django</h1><p>使用Django，可以在几小时内将Web应用程序从概念带到启动。Django处理了许多Web开发的麻烦，因此可以专注于编写应用程序而无需重新发明轮子。并且它是免费和开源的。简单来说就是它速度快、可扩展性强。</p><h1 id="Django安装"><a href="#Django安装" class="headerlink" title="Django安装"></a>Django安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install django #安装最新Django</span><br><span class="line">pip install django&#x3D;&#x3D;2.0.4 #指定版本安装</span><br></pre></td></tr></table></figure><p>验证版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure><p><img src="http://q92ekyelb.bkt.clouddn.com/Django%E7%89%88%E6%9C%AC.png" alt="django版本"></p><h1 id="Django创建项目"><a href="#Django创建项目" class="headerlink" title="Django创建项目"></a>Django创建项目</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">生成django项目</span><br><span class="line"></span><br><span class="line">django-admin startproject 项目名</span><br><span class="line"></span><br><span class="line">生成django子应用</span><br><span class="line"></span><br><span class="line">python manage.py startapp 项目名</span><br><span class="line"></span><br><span class="line">启动django服务</span><br><span class="line"></span><br><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><h1 id="settings-py配置文件的修改"><a href="#settings-py配置文件的修改" class="headerlink" title="settings.py配置文件的修改"></a>settings.py配置文件的修改</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">更改配置文件</span><br><span class="line"></span><br><span class="line">1.找到应用的settings.py</span><br><span class="line"></span><br><span class="line">2.注释MIDDLEWARE中的csr</span><br><span class="line"></span><br><span class="line">注册子应用</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS&#x3D;[</span><br><span class="line"></span><br><span class="line">子应用名</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">修改数据库名：</span><br><span class="line"></span><br><span class="line">name&#x3D; 数据库名</span><br><span class="line"></span><br><span class="line">更改语言</span><br><span class="line"></span><br><span class="line">LANGUAGE &#x3D; &#39;zh-Hans&#39;</span><br><span class="line"></span><br><span class="line">更改时区</span><br><span class="line"></span><br><span class="line">TIME_ZOHE &#x3D; &#39;Asia&#x2F;Shanghai&#39;</span><br><span class="line"></span><br><span class="line">USE_TZ &#x3D; False</span><br><span class="line"></span><br><span class="line">添加静态文件夹：   在配置文件最后</span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS &#x3D; [so.path.join(BASE_DIR,&#39;static&#39;)]</span><br></pre></td></tr></table></figure><h1 id="迁移以及迁移失败的解决方法"><a href="#迁移以及迁移失败的解决方法" class="headerlink" title="迁移以及迁移失败的解决方法"></a>迁移以及迁移失败的解决方法</h1><p>生成迁移文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></table></figure><p>执行迁移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>若执行迁移不成功，就删除migrations文件夹和对应数据库的所有表，重新执行上面的两条命令。</p><p>若还不成功就在数据库手动建表，反向迁移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py inspectdb &gt; 应用名称&#x2F;models.py</span><br></pre></td></tr></table></figure><h1 id="Django-注册小案例"><a href="#Django-注册小案例" class="headerlink" title="Django 注册小案例"></a>Django 注册小案例</h1><p>##注册逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 注册接口</span><br><span class="line">class Register(APIView):</span><br><span class="line"></span><br><span class="line">    def get(self,request):</span><br><span class="line"></span><br><span class="line">        # 接收参数</span><br><span class="line">        username &#x3D; request.GET.get(&#39;username&#39;,None)</span><br><span class="line">        password &#x3D; request.GET.get(&#39;password&#39;,None)</span><br><span class="line"></span><br><span class="line">        # 排重操作</span><br><span class="line">        user &#x3D; User.objects.filter(username&#x3D;username).first()</span><br><span class="line"></span><br><span class="line">        if user:</span><br><span class="line">            return Response(&#123;&#39;code&#39;:403,&#39;message&#39;:&#39;该用户名已存在&#39;&#125;)</span><br><span class="line"></span><br><span class="line">        # 入库</span><br><span class="line">        user &#x3D; User(username &#x3D; username,password &#x3D; make_password(password))</span><br><span class="line"></span><br><span class="line">        # 保存结果</span><br><span class="line">        user.save()</span><br><span class="line"></span><br><span class="line">        return Response(&#123;&#39;code&#39;:200,&#39;message&#39;:&#39;恭喜注册成功&#39;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Django是什么？&quot;&gt;&lt;a href=&quot;#Django是什么？&quot; class=&quot;headerlink&quot; title=&quot;Django是什么？&quot;&gt;&lt;/a&gt;Django是什么？&lt;/h1&gt;&lt;p&gt;Django是一个开放源代码的Web应用框架，由Python写成。采用了MVT的软件设计模式，即模型，视图和模板。它在开发初期用于管理劳伦斯出版集团旗下的一些以新闻为主的网站。Django于2005年7月在BSD许可证下发布，它的名字来源于比利时的吉普赛爵士吉他手Django Reinhardt。&lt;/p&gt;
    
    </summary>
    
    
      <category term="django" scheme="https://Sun-JunYu.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://Sun-JunYu.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>关于爬虫自己所了解的功能梳理</title>
    <link href="https://sun-junyu.github.io/posts/468ef90b/"/>
    <id>https://sun-junyu.github.io/posts/468ef90b/</id>
    <published>2020-03-06T16:00:00.000Z</published>
    <updated>2020-04-23T05:45:03.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-基础"><a href="#一-基础" class="headerlink" title="一.基础"></a>一.基础</h1><h2 id="1-什么是爬虫"><a href="#1-什么是爬虫" class="headerlink" title="1.什么是爬虫"></a>1.什么是爬虫</h2><p>网络爬虫（又被称为网页蜘蛛，网络机器人）就是 模拟客户端(主要指浏览器)发送网络请求，接收请求响应，按照一定的规则，自动地抓取互联网信息的程 序。原则上,只要是客户端(主要指浏览器)能做的事情，爬虫都能够做</p><a id="more"></a><h2 id="2-爬虫的用途"><a href="#2-爬虫的用途" class="headerlink" title="2.爬虫的用途"></a>2.爬虫的用途</h2><ul><li>数据采集</li><li>软件测试</li><li>爬虫之自动化测试</li><li>12306抢票</li><li>网站上的投票</li><li>投票网</li><li>短信轰炸</li><li>注册页面</li><li>web漏洞扫</li></ul><h2 id="3-虚拟环境"><a href="#3-虚拟环境" class="headerlink" title="3.虚拟环境"></a>3.虚拟环境</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. 虚拟环境就是隔离的空间</span><br><span class="line">       1. virtualenvwrapper 管理 虚拟环境</span><br><span class="line">       2. pip install virtualenvwrapper-win -i 网址</span><br><span class="line">       3. virtual 虚拟</span><br><span class="line">       4. env 环境</span><br><span class="line">       5. wrapper</span><br><span class="line">2. mkvirtualenv envname(虚拟环境名)  # 创建虚拟环境并自动切换到该环下</span><br><span class="line">3. workon 虚拟环境名  激活虚拟环境</span><br><span class="line">4. deactivate 退出虚拟环境</span><br><span class="line">5. lsvirtualenv 查看所有的虚拟环境</span><br><span class="line">6. rmvirtualenv 名字 删除虚拟环境</span><br><span class="line">7. pip freeze &gt; requirements.txt  #安装 pip install -r  requirements.txt</span><br><span class="line">8. mkvirtualenv normal -p D:\Python3.8\python.exe</span><br></pre></td></tr></table></figure><h2 id="4-爬虫数据的来源"><a href="#4-爬虫数据的来源" class="headerlink" title="4.爬虫数据的来源"></a>4.爬虫数据的来源</h2><ul><li><p>去第三方的公司购买数据(比如企查查)</p></li><li><p>去免费的数据网站下载数据(比如国家统计局)</p></li><li><p>通过爬虫爬取数据</p></li><li><p>人工收集数据(比如问卷调查)</p></li><li><p>爬虫的概念：模拟浏览器发送网络请求，接收请求响应</p></li></ul><h2 id="5-爬虫的分类"><a href="#5-爬虫的分类" class="headerlink" title="5.爬虫的分类"></a>5.爬虫的分类</h2><ul><li>通用爬虫 ：通常指搜索引擎的爬虫（<a href="https://www.baidu.com%29/">https://www.baidu.com）</a></li></ul><ul><li><p>聚焦爬虫 ：针对特定网站的爬虫</p><p> 针对特定领域</p><p> 抓取特定数据</p><p> 设计思路:</p><pre><code>1. 确定URL，向服务器发起请求，获取响应2. 数据解析—&gt; 目标数据3. 持久化到本地 4. 金融量化分析/对冲 1. 给机器学习的模型提供训练数据</code></pre></li><li><p>一般是以上两种</p><ul><li>增量式爬虫 ：只爬取新产生的或者已经发生变化网页的爬虫</li><li>深网爬虫 ：隐藏在搜索表单或登录表单之后的数据，只有用户提交一些关键词 或登录才能获得的 Web 页面</li></ul></li></ul><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/5c262ead1068a1f1b61a7a867c70e7c.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/5c262ead1068a1f1b61a7a867c70e7c.png" alt="5c262ead1068a1f1b61a7a867c70e7c"></a></p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/46d8f00e26e814f4ea7690ee39e5907.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/46d8f00e26e814f4ea7690ee39e5907.png" alt="46d8f00e26e814f4ea7690ee39e5907"></a></p><h2 id="6-B-S架构和C-S架构"><a href="#6-B-S架构和C-S架构" class="headerlink" title="6.B/S架构和C/S架构"></a>6.B/S架构和C/S架构</h2><ul><li>B/S架构 B-&gt; Browser 浏览器 , S-&gt;Server 服务器</li><li>C/S架构 C-&gt;client 客户端, S-&gt;Server</li><li>B/S架构是特殊的C/S架构</li></ul><h2 id="7-PHP不适合做爬虫"><a href="#7-PHP不适合做爬虫" class="headerlink" title="7.PHP不适合做爬虫"></a>7.PHP不适合做爬虫</h2><ul><li>因为数据时效性比较差</li><li>时效性比较差比太适合爬虫</li></ul><h2 id="8-爬虫语言"><a href="#8-爬虫语言" class="headerlink" title="8.爬虫语言"></a>8.爬虫语言</h2><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/f8247a2132cb26c00d0171d7cfced04.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/f8247a2132cb26c00d0171d7cfced04.png" alt="f8247a2132cb26c00d0171d7cfced04"></a></p><ul><li>PHP:并发能力差，对多进程和多线程支持不好，数据量较大时爬虫效率较低</li><li>C/C++:语言效率高，但是学习成本较大，对程序员的技术能力要求较高，目前还停留在研究阶段，市场需求低</li><li>Java:python爬虫的主要竞争对手，由于java的特点，代码臃肿，代码量大，维护成本高，开发效率低，但是目前市场上市场上需求量还是挺高</li><li>Python:语法简单，学习成本较低，对新手比较友好，Python语言良好的生态，大量和框架的支持是的python爬虫目前处于主导地位</li></ul><h2 id="9-robots协议"><a href="#9-robots协议" class="headerlink" title="9.robots协议"></a>9.robots协议</h2><ul><li>Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots Exclusion Protocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。</li><li>Robots协议是一个道德层面的约定，爬虫作者尊不遵守完全看自己意愿。</li></ul><h2 id="9-网络协议"><a href="#9-网络协议" class="headerlink" title="9.网络协议"></a>9.网络协议</h2><ol><li><p>OSI七层:</p><ul><li>应用层</li><li>会话层</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul></li><li><p>TCP/IP五层</p><ul><li>应用层 http/https,FTP文件传输协议</li><li>传输层 TCP/UDP</li><li>网络层 IP</li><li>数据链路层 ARP</li><li>物理层 以太网</li></ul></li><li><p>HTT[协议和HTTPS</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/1576656784(1).png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/1576656784(1).png" alt="1576656784(1)"></a></p></li><li><p>TCP和UDP</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/1576657100(1).jpg"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/1576657100(1).jpg" alt="1576657100(1)"></a></p><ul><li>TCP面向链接的 基字节的流式传输，可靠<ul><li>有序性</li><li>正确性</li><li>可靠性</li><li>可控性</li></ul></li><li>UDP协议：面向无连接，用户数据报，不可靠<ul><li>无连接，数据可能丢失或者循坏</li><li>报文小，传输效率高</li><li>吞吐量大的网络传输，可能在一定程度上承受数据丢失</li></ul></li></ul></li><li><p>服务器常见的端口</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/1576659512(1).png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/1576659512(1).png" alt="1576659512(1)"></a></p><ol><li>ftp:File Transfer Protocol 的缩写,即文件传输协议,端口 :21</li><li>ssh:Secure Shell的缩写，用于远程登陆会话，端口:22</li><li>MySQL：关系型数据库 ,端口:3306</li><li>MangoDB:非关系型数据库,端口27017</li><li>Redis:非关系型数据库,端口:6379</li></ol></li></ol><h2 id="11-第一次请求"><a href="#11-第一次请求" class="headerlink" title="11. 第一次请求"></a>11. 第一次请求</h2><ol><li><p>URL介绍</p><ul><li><p>URL作用式用于定位服务器资源的</p><p>请求过程:</p><ul><li>客户端，通常指WEB浏览器或APP向服务器发起请求，服务器接收到请求进行处理，并向客户端发起响应</li></ul></li></ul></li><li><p>请求方法</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/cb16878f262d9ba5cd0163514cf0577.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/cb16878f262d9ba5cd0163514cf0577.png" alt="cb16878f262d9ba5cd0163514cf0577"></a></p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/1576723105(1).jpg"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/1576723105(1).jpg" alt="1576723105(1)"></a></p></li><li><p>请求头</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/1576723785(1).jpg"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/1576723785(1).jpg" alt="1576723785(1)"></a></p></li><li><p>请求体</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/46cf8b931131d8e00b5dd4e78418238.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/46cf8b931131d8e00b5dd4e78418238.png" alt="46cf8b931131d8e00b5dd4e78418238"></a></p></li><li><p>状态码</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/F8O$8G8YV_%5D~J_R@MO5T%7BF9.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/F8O$8G8YV_%5D~J_R@MO5T%7BF9.png" alt="img"></a></p></li></ol><ol><li><p>响应体</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/f67f35fa5e80bfe3b5e260a5d305b0e.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/f67f35fa5e80bfe3b5e260a5d305b0e.png" alt="f67f35fa5e80bfe3b5e260a5d305b0e"></a></p></li><li><p>网页基础</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/1576725709(1).jpg"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/1576725709(1).jpg" alt="1576725709(1)"></a></p></li><li><p>GET请求</p><ul><li>url : 请求的链接 是一个字符串</li><li>headers : 请求头是一个字典</li><li>params:请求参数，字典</li><li>verify:禁止证书验证，SSLError</li></ul></li><li><p>POST请求</p><ul><li>url</li><li>headers</li><li>data</li><li>verify</li></ul></li></ol><h2 id="12-JSON爬取和JSON的一些简单的解析规则"><a href="#12-JSON爬取和JSON的一些简单的解析规则" class="headerlink" title="12.JSON爬取和JSON的一些简单的解析规则"></a>12.JSON爬取和JSON的一些简单的解析规则</h2><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191226140526.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191226140526.png" alt="QQ截图20191226140526"></a></p><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line"></span><br><span class="line">from lxml import etree</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">with open(&#39;data.csv&#39;, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">    writer &#x3D; csv.writer(f, delimiter&#x3D;&#39;,&#39;)</span><br><span class="line">    writer.writerow([&#39;标题&#39;, &#39;内容&#39;, &#39;图片&#39;, &#39;时间&#39;])</span><br><span class="line"></span><br><span class="line">for i in range(1,5):</span><br><span class="line">    url &#x3D; &#39;http:&#x2F;&#x2F;news.cctv.com&#x2F;2019&#x2F;07&#x2F;gaiban&#x2F;cmsdatainterface&#x2F;page&#x2F;china_%s.jsonp?cb&#x3D;t&amp;cb&#x3D;china&#39;%i</span><br><span class="line"></span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &#39;User-Agent&#39; : &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.88 Safari&#x2F;537.36&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret &#x3D; requests.get(url&#x3D;url,headers&#x3D;headers)</span><br><span class="line">    ret.encoding &#x3D; &#39;utf-8&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    res &#x3D; re.findall(r&#39;\&#123;.*\&#125;&#39;,ret.text)[0]</span><br><span class="line">    ret &#x3D; json.loads(res)[&#39;data&#39;][&#39;list&#39;]</span><br><span class="line">    for i in ret:</span><br><span class="line">        image &#x3D; i[&#39;image2&#39;]</span><br><span class="line">        title &#x3D; i[&#39;title&#39;]</span><br><span class="line">        brief &#x3D; i[&#39;brief&#39;]</span><br><span class="line">        focus_date &#x3D; i[&#39;focus_date&#39;]</span><br><span class="line">        with open(&#39;data.csv&#39;, &#39;a&#39;, encoding&#x3D;&#39;gbk&#39;) as f:</span><br><span class="line">            writer &#x3D; csv.writer(f, delimiter&#x3D;&#39;,&#39;)</span><br><span class="line">            writer.writerow([title,brief,image,focus_date])</span><br></pre></td></tr></table></figure><h1 id="二-爬虫的准备工作和爬虫的一些基础"><a href="#二-爬虫的准备工作和爬虫的一些基础" class="headerlink" title="二.爬虫的准备工作和爬虫的一些基础"></a>二.爬虫的准备工作和爬虫的一些基础</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><ol><li>在指定环境下安装 pip install requests包(在需要爬虫的虚拟环境等安装此包)</li><li><a href="https://blog.csdn.net/aaronjny/article/details/77945329">https://blog.csdn.net/aaronjny/article/details/77945329</a> （博客）</li></ol><h2 id="2-第一个简单的爬虫"><a href="#2-第一个简单的爬虫" class="headerlink" title="2.第一个简单的爬虫"></a>2.第一个简单的爬虫</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">bd &#x3D; &#39;http:&#x2F;&#x2F;www.baidu.com&#39;</span><br><span class="line">sg &#x3D; &#39;http:&#x2F;&#x2F;www.sogou.com&#39;</span><br><span class="line">res &#x3D; requests.get(url&#x3D;qc)  # 请求页面</span><br><span class="line"></span><br><span class="line"># print(res)  # 打印请求结果的状态码</span><br><span class="line"># print(res.text)  # 打印请求到的网页的源码</span><br><span class="line"># print(res.content) # 二进制的网页源码</span><br><span class="line"></span><br><span class="line">res.encoding &#x3D; &#39;urt-8&#39;  # 根据网页的编码格式更改</span><br><span class="line"></span><br><span class="line">with open(&#39;qianchengwuyou.html&#39;, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">    f.write(res.text)</span><br><span class="line">    </span><br><span class="line">with open(&#39;qianchengwuyou.html&#39;, &#39;wb&#39;) as f:  # 以二进制写入，就不存在乱码 一般不推荐使用</span><br><span class="line">    f.write(res.content)</span><br></pre></td></tr></table></figure><h2 id="3-爬虫的一些语法"><a href="#3-爬虫的一些语法" class="headerlink" title="3.爬虫的一些语法"></a>3.爬虫的一些语法</h2><ol><li><p>爬虫的一些发送请求</p><p><a href="file:///C:/%5CUsers%5CXiaobai%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191219164309237.png"><img src="file:///C:/%5CUsers%5CXiaobai%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191219164309237.png" alt="image-20191219164309237"></a>)!(/my_technology_blog_hexo/markdown_img/4cb3f14a08714f863659a7325ec7335.png)</p></li></ol><h2 id="5-requests的高级应用"><a href="#5-requests的高级应用" class="headerlink" title="5.requests的高级应用"></a>5.requests的高级应用</h2><ol><li><p>上传文件</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191220103658.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191220103658.png" alt="QQ截图20191220103658"></a></p></li><li><p>Cookie维持</p><p> <a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191220104533.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191220104533.png" alt="QQ截图20191220104533"></a></p><p>​</p><p>Python</p><p>​</p><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;Cookie&#39; : &#39;网页登陆信息的cookie的值&#39;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>Session状态维持</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191220110431.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191220110431.png" alt="QQ截图20191220110431"></a></p></li><li><p>SLL证书验证</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191220113255.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191220113255.png" alt="QQ截图20191220113255"></a>)<a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191220113334.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191220113334.png" alt="QQ截图20191220113334"></a></p></li><li><p>代理IP数据构建</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191220113942.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191220113942.png" alt="QQ截图20191220113942"></a>)<a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191220115123.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191220115123.png" alt="QQ截图20191220115123"></a></p></li><li><p>超时设置</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191220154603.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191220154603.png" alt="QQ截图20191220154603"></a></p><p>​</p><p>Python</p><p>​</p><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;https:&#x2F;&#x2F;www.baidu.com&#39;</span><br><span class="line"></span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;User-Agent&#39; : &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.88 Safari&#x2F;537.36&#39;,</span><br><span class="line">&#125;</span><br><span class="line">try:</span><br><span class="line">    res &#x3D; requests.get(url&#x3D;url,headers&#x3D;headers,timeout&#x3D;0.01)</span><br><span class="line">except:</span><br><span class="line">    print(&#39;超时&#39;)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>构建Request对象</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/%E6%9E%84%E5%BB%BARequest.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/%E6%9E%84%E5%BB%BARequest.png" alt="构建Request"></a>)<a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/%E6%9E%84%E5%BB%BARequ2.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/%E6%9E%84%E5%BB%BARequ2.png" alt="构建Requ2"></a></p></li><li><p>urllib简单介绍</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/urllib.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/urllib.png" alt="urllib"></a></p><p>![urllib get](/my_technology_blog_hexo/markdown_img/urllib get.png)</p><p>![urllib post](/my_technology_blog_hexo/markdown_img/urllib post.png)</p></li><li><p>re模块</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/re%E6%A8%A1%E5%9D%97.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/re%E6%A8%A1%E5%9D%97.png" alt="re模块"></a></p></li></ol><h2 id="6-利用urllib-request中的urlretrieve爬取图片"><a href="#6-利用urllib-request中的urlretrieve爬取图片" class="headerlink" title="6.利用urllib.request中的urlretrieve爬取图片"></a>6.利用urllib.request中的urlretrieve爬取图片</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from urllib.request import urlretrieve</span><br><span class="line">import re</span><br><span class="line">import json</span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;User-Agent&#39; : &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.88 Safari&#x2F;537.36&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;https:&#x2F;&#x2F;tu.enterdesk.com&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">res &#x3D; requests.get(url&#x3D;url,headers&#x3D;headers)</span><br><span class="line">src_list &#x3D; re.findall(r&#39;https:&#x2F;&#x2F;up.enterdesk.com&#x2F;.*?\.jpg&#39;,res.text)</span><br><span class="line">for src in src_list:</span><br><span class="line">    name &#x3D; src.split(&#39;&#x2F;&#39;)[-1]</span><br><span class="line">    urlretrieve(src,&#39;.&#x2F;imgs&#x2F;%s&#39;%name)</span><br></pre></td></tr></table></figure><h2 id="7-正则"><a href="#7-正则" class="headerlink" title="7.正则"></a>7.正则</h2><ol><li>分组</li></ol><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/%E5%88%86%E7%BB%84%E5%8C%B9%E9%85%8D.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/%E5%88%86%E7%BB%84%E5%8C%B9%E9%85%8D.png" alt="分组匹配"></a></p><ol><li>分组</li></ol><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F.png" alt="匹配模式"></a></p><ol><li><p>re模块</p><p><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191221094157.png" alt="QQ截图20191221094157"></p></li></ol><h2 id="8-xpath的语法"><a href="#8-xpath的语法" class="headerlink" title="8.xpath的语法"></a>8.xpath的语法</h2><ol><li>xpath解析库 介绍</li></ol><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191221103812.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191221103812.png" alt="QQ截图20191221103812"></a></p><ol><li><p>xpath安装 初体验–&gt;使用步骤</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191221104953.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191221104953.png" alt="QQ截图20191221104953"></a></p></li><li><p>常规语法</p></li></ol><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191221105854.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191221105854.png" alt="QQ截图20191221105854"></a></p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191221105909.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191221105909.png" alt="QQ截图20191221105909"></a></p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191221110337.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191221110337.png" alt="QQ截图20191221110337"></a></p><h2 id="9-BeautifulSoup库使用"><a href="#9-BeautifulSoup库使用" class="headerlink" title="9.BeautifulSoup库使用"></a>9.BeautifulSoup库使用</h2><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191223092602.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191223092602.png" alt="QQ截图20191223092602"></a></p><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">soup &#x3D; BeautifulSoup(res.text,&#39;lxml&#39;)  # 必须装好lxml</span><br><span class="line"></span><br><span class="line">tab &#x3D; soup.find_all(name,atters,text)  # 方法选择器</span><br></pre></td></tr></table></figure><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191223092902.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/" alt="QQ截图20191223092902"></a></p><ol><li><p>方法选择器</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191224083721.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/" alt="QQ截图20191224083721"></a></p></li><li><p>类选择器</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191224084005.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/" alt="QQ截图20191224084005"></a></p></li><li><p>嵌套选择器</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191224084123.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/" alt="QQ截图20191224084123"></a></p><ol><li>获取文本和属性<ul><li>string : 获取直接子文本,如果 有平行标签的话，返回的是一个None</li><li>get_text() : 获取的是子孙节点的所有文本</li><li>element[‘attribute’] : 节点的属性</li></ul></li></ol></li></ol><h2 id="10-CSV写入文件和JSON写入"><a href="#10-CSV写入文件和JSON写入" class="headerlink" title="10.CSV写入文件和JSON写入"></a>10.CSV写入文件和JSON写入</h2><ul><li><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191223152022.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/" alt="QQ截图20191223152022"></a></li><li><code>import csvwith open(&#39;data.csv&#39;,&#39;w&#39;,encoding=&#39;utf-8&#39;) as csvf:​    writer = csv.writer(csvf,delimiter=&#39;,&#39;)​    writer.writerow([&#39;标题&#39;,&#39;内容&#39;,&#39;姓名&#39;]) \#这是 csv 的    **Code**- ```python  import json  lst = []  for i in range(100):      d = {&#39;name&#39;: &#39;%s名字&#39;%i, &#39;age&#39;: i*3}      lst.append(d)  with open(&#39;data.json&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f:      f.write(json.dumps(lst, ensure_ascii=False, indent=4))  # 这是 json的</code></li></ul><h2 id="11-selenium介绍"><a href="#11-selenium介绍" class="headerlink" title="11.selenium介绍"></a>11.selenium介绍</h2><ol><li><p>介绍</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191224085324.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/" alt="QQ截图20191224085324"></a></p></li><li><p>安装</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191224085634.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/" alt="QQ截图20191224085634"></a></p><ul><li>推荐使用谷歌浏览器稳定版</li><li>三要素: 浏览器，驱动程序，selenium框架</li><li>驱动下载地址:<a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></li><li>安装 pip install selenium</li></ul><p>​</p><p>Python</p><p>​</p><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#测试</span><br><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser &#x3D; webdriver.Chrome(&#39;.&#x2F;chromedriver.exe&#39;)</span><br><span class="line">browser.get(&#39;https:&#x2F;&#x2F;www.baidu.com&#39;)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>常用操作</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191224090258.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191224090258.png" alt="QQ截图20191224090258"></a></p></li><li><p>获取页面元素</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191224093114.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191224093114.png" alt="QQ截图20191224093114"></a></p></li><li><p>交互操作</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191224093702.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191224093702.png" alt="QQ截图20191224093702"></a></p></li><li><p>获取网页数据</p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191224093848.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/" alt="QQ截图20191224093848"></a></p></li></ol><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">js&#x3D;&#39;window.scrollTo(0,document.body.scrollHeight)&#39;</span><br><span class="line">brower.execute_script(js)</span><br><span class="line"># 滚动到最底下</span><br></pre></td></tr></table></figure><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">html &#x3D; brower.page_source</span><br><span class="line">with open(&#39;gushi.html&#39;,&#39;w&#39;,encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">    f.write(html)</span><br><span class="line">    # 将源代码写入html中</span><br></pre></td></tr></table></figure><h2 id="11-雪球网站"><a href="#11-雪球网站" class="headerlink" title="11.雪球网站"></a>11.雪球网站</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from lxml import etree</span><br><span class="line">from selenium import webdriver</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def jiexi(res):</span><br><span class="line">    tree &#x3D; etree.HTML(res)</span><br><span class="line">    res_list &#x3D; tree.xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;AnonymousHome_home__timeline_VTo&quot;]&#x2F;div&#x2F;&#x2F;div[@class&#x3D;&quot;AnonymousHome_home__timeline__item_3vU&quot;]&#39;)</span><br><span class="line">    cc&#x3D; []</span><br><span class="line">    for i in res_list:</span><br><span class="line">        h3 &#x3D; i.xpath(&#39;.&#x2F;h3&#x2F;a&#x2F;text()&#39;)</span><br><span class="line">        zuozhe &#x3D; i.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;AnonymousHome_auchor_1RR&quot;]&#x2F;a[@class&#x3D;&quot;AnonymousHome_user-name_3wN&quot;]&#x2F;text()&#39;)</span><br><span class="line">        fabu_time &#x3D; i.xpath(&#39;.&#x2F;&#x2F;span[2]&#x2F;text()&#39;)</span><br><span class="line">        yuedu &#x3D; i.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;AnonymousHome_read_2t5&quot;]&#x2F;text()&#39;)</span><br><span class="line">        cc.append(&#123;</span><br><span class="line">            &#39;h3&#39; : h3 ,</span><br><span class="line">            &#39;zuozhe&#39; : zuozhe ,</span><br><span class="line">            &#39;fabutime&#39; : fabu_time ,</span><br><span class="line">            &#39;yuedu&#39; : yuedu</span><br><span class="line">        &#125;)</span><br><span class="line">    return cc</span><br><span class="line"></span><br><span class="line">import csv</span><br><span class="line">def xiazai(res_list):</span><br><span class="line">    with open(&#39;xue_qiu.csv&#39;,&#39;w&#39;,encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">        writer &#x3D; csv.writer(f,delimiter&#x3D;&#39;,&#39;)</span><br><span class="line">        writer.writerow([&#39;标题&#39;,&#39;作者&#39;,&#39;发布时间&#39;,&#39;点击量&#39;])</span><br><span class="line"></span><br><span class="line">    for i in res_list:</span><br><span class="line">        try:</span><br><span class="line">            username &#x3D; i[&#39;h3&#39;][0]</span><br><span class="line">            zuozhe &#x3D; i[&#39;zuozhe&#39;][0]</span><br><span class="line">            fabutime &#x3D; i[&#39;fabutime&#39;][0]</span><br><span class="line">            yuedu &#x3D; i[&#39;yuedu&#39;][0]</span><br><span class="line">            with open(&#39;xue_qiu.csv&#39;, &#39;a&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">                writer &#x3D; csv.writer(f, delimiter&#x3D;&#39;,&#39;)</span><br><span class="line">                writer.writerow([str(username),zuozhe, fabutime, yuedu])</span><br><span class="line">        except:</span><br><span class="line">            zuozhe &#x3D; i[&#39;zuozhe&#39;][0]</span><br><span class="line">            fabutime &#x3D; i[&#39;fabutime&#39;][0]</span><br><span class="line">            yuedu &#x3D; i[&#39;yuedu&#39;][0]</span><br><span class="line">            with open(&#39;xue_qiu.csv&#39;, &#39;a&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">                writer &#x3D; csv.writer(f, delimiter&#x3D;&#39;,&#39;)</span><br><span class="line">                writer.writerow([&#39;无标题&#39;,zuozhe, fabutime, yuedu])</span><br><span class="line"></span><br><span class="line">def main(res):</span><br><span class="line">    url &#x3D; &#39;https:&#x2F;&#x2F;xueqiu.com&#x2F;&#39;</span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &#39;User-Agent&#39; : &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.88 Safari&#x2F;537.36&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    res_list &#x3D; jiexi(res)</span><br><span class="line">    xiazai(res_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    brower &#x3D; webdriver.Chrome()</span><br><span class="line">    brower.get(&#39;https:&#x2F;&#x2F;xueqiu.com&#x2F;&#39;)</span><br><span class="line">    js &#x3D; &#39;window.scrollTo(0,document.body.scrollHeight)&#39;  # 将页面滚动到最下面</span><br><span class="line">    for i in range(1, 6):</span><br><span class="line">        if i &gt;&#x3D; 5:</span><br><span class="line">            brower.find_element_by_link_text(&#39;加载更多&#39;).click()</span><br><span class="line">            print(&#39;点击了&#39;)</span><br><span class="line">        else:</span><br><span class="line">            brower.execute_script(js) .</span><br><span class="line">            time.sleep(1)</span><br><span class="line">    res &#x3D; brower.page_source</span><br><span class="line"></span><br><span class="line">    main(res)</span><br></pre></td></tr></table></figure><h2 id="12-模拟QQ空间登陆-没有涉及图片滑动解锁"><a href="#12-模拟QQ空间登陆-没有涉及图片滑动解锁" class="headerlink" title="12.模拟QQ空间登陆(没有涉及图片滑动解锁)"></a>12.模拟QQ空间登陆(没有涉及图片滑动解锁)</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver  # 操作网页的包</span><br><span class="line"></span><br><span class="line">from time import sleep  # 时间模块</span><br><span class="line"></span><br><span class="line">brower &#x3D; webdriver.Chrome()  # 实例化</span><br><span class="line">brower.get(&#39;https:&#x2F;&#x2F;qzone.qq.com&#x2F;&#39;)  # 确认要操作的网页</span><br><span class="line">brower.switch_to.frame(&#39;login_frame&#39;)  # 进入页面的子页面，QQ空间</span><br><span class="line">brower.find_element_by_id(&#39;switcher_plogin&#39;).click()</span><br><span class="line"># brower.find_element_by_id(&#39;img_out_1559878380&#39;).click()  # 快捷登陆，前提是需要登陆QQ</span><br><span class="line">sleep(4)</span><br><span class="line">user &#x3D; brower.find_element_by_id(&#39;u&#39;)  # 账户输入框的ID值</span><br><span class="line">sleep(5)</span><br><span class="line">user.clear()  # 清空账号框的内容，避免session存储了数据</span><br><span class="line">user.send_keys(&#39;1559878380&#39;)  # 在输入框内输入指定的数据</span><br><span class="line">pwd &#x3D; brower.find_element_by_id(&#39;p&#39;)  # 定位密码框的ID值</span><br><span class="line">sleep(5)</span><br><span class="line">pwd.clear()  # 清空密码框的内容</span><br><span class="line">pwd.send_keys(&#39;224949826..&#39;)  # 输入密码框的内容</span><br><span class="line">sleep(5)</span><br><span class="line">brower.find_element_by_id(&#39;login_button&#39;).click()  # 定位登陆按钮的ID值，并且点击</span><br></pre></td></tr></table></figure><h2 id="13-百度图片爬取-利用selenium-辉夜大小姐）"><a href="#13-百度图片爬取-利用selenium-辉夜大小姐）" class="headerlink" title="13.百度图片爬取,利用selenium (辉夜大小姐）"></a>13.百度图片爬取,利用selenium (辉夜大小姐）</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import requests  # 导包</span><br><span class="line">from selenium import webdriver  # 操作网页的包</span><br><span class="line">from lxml import etree  # 解析包</span><br><span class="line">import time  # 导入时间模块</span><br><span class="line">from time import sleep</span><br><span class="line">brower &#x3D; webdriver.Chrome()  # 实例化</span><br><span class="line">brower.get(&#39;http:&#x2F;&#x2F;image.baidu.com&#x2F;&#39;)  # 需要操作的操作</span><br><span class="line"></span><br><span class="line">brower.find_element_by_id(&#39;kw&#39;).send_keys(&#39;辉夜大小姐&#39;)  # 获取搜索框的id值，利用send_keys输入指定值</span><br><span class="line">ret &#x3D; brower.find_element_by_class_name(&#39;s_search&#39;)  # 利用方法找到搜索按钮，</span><br><span class="line">ret.click()  # 点击搜索按钮</span><br><span class="line">sleep(2)  # 休息2s</span><br><span class="line">for i in range(3):  # 循环3次</span><br><span class="line">    js &#x3D; &#39;window.scrollTo(0,document.body.scrollHeight)&#39;  # 页面向下拉到最底部</span><br><span class="line">    brower.execute_script(js)  # 执行js代码</span><br><span class="line">    time.sleep(4)  # 休眠4s</span><br><span class="line">res &#x3D; brower.page_source  # 将页面的HTML页面的源代码 抓取</span><br><span class="line"></span><br><span class="line">terr &#x3D; etree.HTML(res)  # 实例化xpath</span><br><span class="line">ret_list &#x3D; terr.xpath(&#39;&#x2F;&#x2F;div[@id&#x3D;&quot;imgid&quot;]&#x2F;div&#x2F;&#x2F;ul&#x2F;li&#39;)  # 匹配要抓取的数据</span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;User-Agent&#39; : &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.88 Safari&#x2F;537.36&#39;</span><br><span class="line">&#125;</span><br><span class="line">for i in ret_list:</span><br><span class="line">    url_li &#x3D; i.xpath(&#39;.&#x2F;@data-objurl&#39;)[0]</span><br><span class="line">    res &#x3D; requests.get(url&#x3D;url_li,headers&#x3D;headers).content</span><br><span class="line">    name &#x3D; url_li.split(&#39;&#x2F;&#39;)[-1]</span><br><span class="line">    with open(&#39;.&#x2F;imgs&#x2F;%s&#39;%name,&#39;wb&#39;) as f:</span><br><span class="line">        f.write(res)</span><br></pre></td></tr></table></figure><h2 id="14-谷歌无头浏览器"><a href="#14-谷歌无头浏览器" class="headerlink" title="14.谷歌无头浏览器"></a>14.谷歌无头浏览器</h2><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191225083740.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191225083740.png" alt="微信截图_20191225083740"></a></p><h1 id="三-多线程爬虫"><a href="#三-多线程爬虫" class="headerlink" title="三.多线程爬虫"></a>三.多线程爬虫</h1><h2 id="1-并发和并行"><a href="#1-并发和并行" class="headerlink" title="1.并发和并行"></a>1.并发和并行</h2><ul><li>并发:同一时间段内共同执行<ul><li>时间片轮转法:给每一个程序一个时间段，一点一点执行，可能导致结果出错(不加锁的情况下)</li><li>多线程可能会导致数据不安全(上锁可以避免此情况)</li></ul></li><li>并行：同一时刻一起执行</li></ul><h2 id="2-爬虫架构图"><a href="#2-爬虫架构图" class="headerlink" title="2.爬虫架构图"></a>2.爬虫架构图</h2><ol><li>URL队列</li><li>爬虫线程类</li><li>data队列</li><li>数据解析的线程类</li></ol><h2 id="3-多线程爬虫实例-存储的是csv格式"><a href="#3-多线程爬虫实例-存储的是csv格式" class="headerlink" title="3.多线程爬虫实例(存储的是csv格式)"></a>3.多线程爬虫实例(存储的是csv格式)</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">import requests</span><br><span class="line">from lxml import etree</span><br><span class="line">from queue import Queue</span><br><span class="line">from threading import Lock</span><br><span class="line">import csv</span><br><span class="line">#封装爬虫类(负责数据采集的)</span><br><span class="line">class CrawlThread(threading.Thread):</span><br><span class="line">    def __init__(self,crawlName,pageQueue,dataQueue):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.crawlname &#x3D; crawlName  # 爬虫名，用于监控爬虫的运行过程</span><br><span class="line">        self.pageQueue &#x3D; pageQueue  # url的队列，用于存放url</span><br><span class="line">        self.dataQueue &#x3D; dataQueue  # 存放响应数据</span><br><span class="line">        self.headers &#x3D; &#123;</span><br><span class="line">            &#39;User-Agent&#39; : &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.88 Safari&#x2F;537.36&#39;</span><br><span class="line">        &#125;  # UA伪装</span><br><span class="line">    def run(self):</span><br><span class="line">        base_url &#x3D; &#39;http:&#x2F;&#x2F;xiaohua.zol.com.cn&#x2F;lengxiaohua&#x2F;%s.html&#39;  # 定义一个基准的url</span><br><span class="line">        while True:</span><br><span class="line">            try:</span><br><span class="line">                page &#x3D; self.pageQueue.get(block&#x3D;False)</span><br><span class="line">                # block参数代表队列参数是否阻塞</span><br><span class="line">                # 如果block &#x3D; Ture 代表阻塞，如果队列为空，在get时，会产生阻塞，知道队列有元素可以get 时为止，可是获取元素</span><br><span class="line">                # block &#x3D; False 代表不阻塞，如果队列为空，get的操作会抛出异常</span><br><span class="line">                print(&#39;%s正在爬取数据&#39;%self.crawlname)</span><br><span class="line">                # 请求页面获取响应数据</span><br><span class="line">                res &#x3D; requests.get(url&#x3D;base_url%page,headers&#x3D;self.headers).text</span><br><span class="line">                # 将响应数据提交给dataQueue，以便后续的解析的线程取用</span><br><span class="line">                self.dataQueue.put(res)</span><br><span class="line">                print(&#39;%s提交数据完毕&#39;%self.crawlname)</span><br><span class="line">            except:</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">#解析类(负责数据的解析和存储)</span><br><span class="line">class PaarseThead(threading.Thread):</span><br><span class="line">    def __init__(self,p,dataQueue,lock):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.PaarseName &#x3D; p</span><br><span class="line">        self.dataQueue &#x3D; dataQueue</span><br><span class="line">        self.lock &#x3D; lock</span><br><span class="line">    def run(self):</span><br><span class="line">        while True:</span><br><span class="line">            try:</span><br><span class="line">                html &#x3D; self.dataQueue.get(block&#x3D;False)</span><br><span class="line">                print(&#39;%s正在解析数据&#39;%self.PaarseName)</span><br><span class="line">                self.parse(html)</span><br><span class="line">                print(&#39;%s数据数据解析完毕&#39;%self.PaarseName)</span><br><span class="line">            except:</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def parse(self,html):</span><br><span class="line">        # 具体的解析过程</span><br><span class="line">        tree &#x3D; etree.HTML(html)</span><br><span class="line">        res &#x3D; tree.xpath(&#39;&#x2F;&#x2F;li[@class&#x3D;&quot;article-summary&quot;]&#39;)</span><br><span class="line">        self.csv_t()</span><br><span class="line">        for i in res:</span><br><span class="line">            title &#x3D; i.xpath(&#39;.&#x2F;span[2]&#x2F;a&#x2F;text()&#39;)[0]</span><br><span class="line">            href &#x3D; i.xpath(&#39;.&#x2F;span[2]&#x2F;a&#x2F;@href&#39;)[0]</span><br><span class="line">            content &#x3D; i.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;summary-text&quot;]&#x2F;text()&#39;)</span><br><span class="line">            d &#x3D; &#123;&#39;title&#39; : title,&#39;href&#39;:href,&#39;content&#39;:content&#125;</span><br><span class="line">            with self.lock:</span><br><span class="line">                self.save(d)</span><br><span class="line"></span><br><span class="line">    def csv_t(self):</span><br><span class="line">        with open(&#39;data.csv&#39;,&#39;w&#39;,encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">            writer &#x3D; csv.writer(f,delimiter&#x3D;&#39;,&#39;)</span><br><span class="line">            writer.writerow([&#39;标题&#39;,&#39;链接&#39;,&#39;内容&#39;])</span><br><span class="line">    def save(self,d):</span><br><span class="line">        with open(&#39;data.csv&#39;,&#39;a&#39;,encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">            writer &#x3D; csv.writer(f,delimiter&#x3D;&#39;,&#39;)</span><br><span class="line">            writer.writerow([d[&#39;title&#39;],d[&#39;href&#39;],d[&#39;content&#39;][0]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    pageQueue &#x3D; Queue()  # 存放url的队列</span><br><span class="line">    dataQueue &#x3D; Queue()  # 存放响应数据的队列</span><br><span class="line"></span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    发起请求和获取响应</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    for i in range(1,20):</span><br><span class="line">        pageQueue.put(i)  # 向url队列添加列表</span><br><span class="line"></span><br><span class="line">    CrawlName &#x3D; [&#39;爬虫一号&#39;,&#39;爬虫二号&#39;,&#39;爬虫三号&#39;]</span><br><span class="line">    crawlList &#x3D; []</span><br><span class="line"></span><br><span class="line">    for var in CrawlName:  #实例化爬虫线程对象</span><br><span class="line">        c &#x3D; CrawlThread(var,pageQueue,dataQueue)</span><br><span class="line">        c.start()  # 开启线程</span><br><span class="line">        crawlList.append(c)</span><br><span class="line"></span><br><span class="line">    for c in crawlList:  # 将线程统一执行join操作</span><br><span class="line">        c.join()</span><br><span class="line"></span><br><span class="line">    print(dataQueue.qsize())  # 查看dataQueue队列中有几条数据</span><br><span class="line"></span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    解析数据</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    lock &#x3D; Lock()</span><br><span class="line">    PaarseName &#x3D; [&#39;解析1号&#39;,&#39;解析2号&#39;,&#39;解析3号&#39;]</span><br><span class="line">    PaarseList &#x3D; []</span><br><span class="line">    for p in PaarseName:</span><br><span class="line">        cc &#x3D; PaarseThead(p,dataQueue,lock)</span><br><span class="line">        cc.start()</span><br><span class="line">        PaarseList.append(cc)</span><br><span class="line">    for pl in PaarseList:</span><br><span class="line">        pl.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="4-多线程爬取辽宁工程"><a href="#4-多线程爬取辽宁工程" class="headerlink" title="4.多线程爬取辽宁工程"></a>4.多线程爬取辽宁工程</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">from lxml import etree  # 导包lxml包</span><br><span class="line">import requests  </span><br><span class="line">import pymongo</span><br><span class="line">from queue import Queue</span><br><span class="line">import threading</span><br><span class="line">from threading import Lock</span><br><span class="line"></span><br><span class="line">conn &#x3D; pymongo.MongoClient(&#39;127.0.0.1&#39;,27017)  # 实例化mangodb数据库</span><br><span class="line">db &#x3D; conn.ztb  # 要使用的数据库，如果该数据库则创建新的数据库</span><br><span class="line">table &#x3D; db.lngc  # 使用该表，如果没有该表，则创建该表</span><br><span class="line"></span><br><span class="line">class CrawlThread(threading.Thread):  # 爬虫类</span><br><span class="line">    def __init__(self,crawname,urlqueue,dataqueue,headers):</span><br><span class="line">        super().__init__()  # 使init不报黄</span><br><span class="line">        self.crawname &#x3D; crawname  # 将当前爬虫(爬虫1号or爬虫2号等) 传值过来，方便显示</span><br><span class="line">        self.urlqueue &#x3D; urlqueue  # 将url队列传过来</span><br><span class="line">        self.dataqueue &#x3D; dataqueue  # 响应值队列</span><br><span class="line">        self.headers &#x3D; headers  # 请求头</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">       while True:  # 无限循环</span><br><span class="line">           try:</span><br><span class="line">               print(&#39;%s正在抓取数据页面&#39;%self.crawname)  # 在后端显示当前是几号爬虫在爬取数据</span><br><span class="line">               res &#x3D; requests.get(url&#x3D;self.urlqueue.get(block&#x3D;False),headers&#x3D;self.headers).text  # 将url队列中的路由取出来，队列的get操作每次只获取一个数据</span><br><span class="line">               print(&#39;%s正在抓取完毕&#39;%self.crawname)</span><br><span class="line">               self.dataqueue.put(res)  # 将获取到响应数据 添加到响应数据队列</span><br><span class="line">           except:</span><br><span class="line">               break  # 因为 get()有 block&#x3D;False 如果取值下一个没有数据 则报错 报错就会终止该循环</span><br><span class="line"></span><br><span class="line">class ParseThead(threading.Thread):  # 解析类</span><br><span class="line">    def __init__(self,parse,dataqueue,lock):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.parse &#x3D; parse  # 将当前解析对象赋值给self.parse</span><br><span class="line">        self.dataqueue &#x3D; dataqueue  # 将响应数据队列传过来，注意 此时的队列已经是有数据</span><br><span class="line">        self.lock &#x3D; lock  # 锁</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        while True:</span><br><span class="line">            try:</span><br><span class="line">                print(&#39;%s正在解析数据&#39;%self.parse)</span><br><span class="line">                ret &#x3D; self.dataqueue.get(block&#x3D;False)  # 将队列中的数据取出来，一次只能取一个</span><br><span class="line">                print(&#39;%s解析数据完毕&#39;%self.parse)</span><br><span class="line">                self.parsejiexi(ret)  # 将获取的值作为实参传给函数parsejiexi</span><br><span class="line">            except:</span><br><span class="line">                break</span><br><span class="line">    def parsejiexi(self,cc):</span><br><span class="line">        tree &#x3D; etree.HTML(cc)  # 实例化etree</span><br><span class="line">        ret &#x3D; tree.xpath(&#39;&#x2F;&#x2F;ul[@id&#x3D;&quot;showList&quot;]&#x2F;li&#39;)  # 解析页面，获取当前页所有的li</span><br><span class="line">        for i in ret:  # 循环所有的li</span><br><span class="line">            title &#x3D; i.xpath(&#39;.&#x2F;&#x2F;a&#x2F;font[1]&#x2F;text()&#39;)[0]  # 获取每个li中的要获取的值</span><br><span class="line">            href &#x3D; i.xpath(&#39;.&#x2F;&#x2F;a&#x2F;@href&#39;)[0]</span><br><span class="line">            laizi &#x3D; i.xpath(&#39;.&#x2F;&#x2F;a&#x2F;font[2]&#x2F;text()&#39;)[0]</span><br><span class="line">            biaoti &#x3D; i.xpath(&#39;.&#x2F;&#x2F;a&#x2F;text()&#39;)[0]</span><br><span class="line">            time &#x3D; i.xpath(&#39;.&#x2F;span&#x2F;text()&#39;)[0]</span><br><span class="line">            d &#x3D; &#123;&#39;title&#39;:title,&#39;href&#39;:&#39;http:&#x2F;&#x2F;lnzxzb.cn&#39;+href,&#39;laizi&#39;:laizi,&#39;biaoti&#39;:biaoti,&#39;time&#39;:time&#125;  # 将获取的值 存放在字典中，mongodb存储格式也是字典 所以直接可以添加到mogodb中</span><br><span class="line">               with self.lock:  #开启锁，如果当前代码结束就解锁</span><br><span class="line">            self.mongodb_insert(d)  # 调用数据持久化的函数</span><br><span class="line">    def mongodb_insert(self,d):  # 数据持久化的函数</span><br><span class="line">        table.insert_one(d)  # 将数据存储在数据库中</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    urlqueue &#x3D; Queue()  # 实例化url队列</span><br><span class="line">    dataqueue &#x3D; Queue()  # 实例化响应队列</span><br><span class="line">    shouye_url &#x3D; [&#39;http:&#x2F;&#x2F;lnzxzb.cn&#x2F;gcjyxx&#x2F;subpage.html&#39;]  # 首页路由</span><br><span class="line">    yema &#x3D; [&#39;http:&#x2F;&#x2F;lnzxzb.cn&#x2F;gcjyxx&#x2F;%s.html&#39;%page for page in range(1,51)]  # 列表推导式 推导出50个页面</span><br><span class="line">    shouye_url.extend(yema)  # 拆分添加</span><br><span class="line">    for i in shouye_url:  # 将所有页面循环</span><br><span class="line">        urlqueue.put(i)  # 将url添加到url队列中</span><br><span class="line"></span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &#39;user-Agent&#39; : &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.88 Safari&#x2F;537.36&#39;</span><br><span class="line">    &#125;  # 表头</span><br><span class="line"></span><br><span class="line">    CrawlName &#x3D; [&#39;爬虫1号&#39;,&#39;爬虫2号&#39;,&#39;爬虫3号&#39;,&#39;爬虫4号&#39;,&#39;爬虫5号&#39;,&#39;爬虫6号&#39;,&#39;爬虫7号&#39;]  # 随便写几个爬虫</span><br><span class="line">    CrawList &#x3D; []  # 做一个空列表</span><br><span class="line">    for craw in CrawlName:  # 循环列表 因为CrawName 有7个 所以开了7个线程</span><br><span class="line">        c &#x3D; CrawlThread(craw,urlqueue,dataqueue,headers)  # 实例化线程</span><br><span class="line">        c.start()  # 开启线程</span><br><span class="line">        CrawList.append(c)  # 将线程的变量存储到空列表中</span><br><span class="line">    for c in CrawList:</span><br><span class="line">        c.join()  # 等待线程结束才关闭主线程</span><br><span class="line"></span><br><span class="line">    # 下面的这些和上面一个意思  就是 开启的线程是 4 个线程      </span><br><span class="line">    ParseName &#x3D; [&#39;解析1号&#39;,&#39;解析2号&#39;,&#39;解析3号&#39;,&#39;解析4号&#39;]</span><br><span class="line">    ParseList &#x3D; []</span><br><span class="line">    ParList &#x3D; []</span><br><span class="line">    lock &#x3D; Lock()</span><br><span class="line">    for parse in ParseName:</span><br><span class="line">        p &#x3D; ParseThead(parse,dataqueue,lock)</span><br><span class="line">        p.start()</span><br><span class="line">        ParseList.append(p)</span><br><span class="line">    for p in ParList:</span><br><span class="line">        p.join()</span><br><span class="line">    # print(dataqueue.qsize())</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="四-第三方打码平台-超级鹰"><a href="#四-第三方打码平台-超级鹰" class="headerlink" title="四.第三方打码平台(超级鹰)"></a>四.第三方打码平台(超级鹰)</h1><h2 id="1-打码平台代码"><a href="#1-打码平台代码" class="headerlink" title="1.打码平台代码"></a>1.打码平台代码</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># coding:utf-8</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">from hashlib import md5</span><br><span class="line"></span><br><span class="line">class Chaojiying_Client(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, username, password, soft_id):</span><br><span class="line">            self.username &#x3D; username</span><br><span class="line">            password &#x3D;  password.encode(&#39;utf8&#39;)</span><br><span class="line">            self.password &#x3D; md5(password).hexdigest()</span><br><span class="line">            self.soft_id &#x3D; soft_id</span><br><span class="line">            self.base_params &#x3D; &#123;</span><br><span class="line">                &#39;user&#39;: self.username,</span><br><span class="line">                &#39;pass2&#39;: self.password,</span><br><span class="line">                &#39;softid&#39;: self.soft_id,</span><br><span class="line">            &#125;</span><br><span class="line">            self.headers &#x3D; &#123;</span><br><span class="line">                &#39;Connection&#39;: &#39;Keep-Alive&#39;,</span><br><span class="line">                &#39;User-Agent&#39;: &#39;Mozilla&#x2F;4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident&#x2F;4.0)&#39;,</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    def PostPic(self, im, codetype):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        im: 图片字节</span><br><span class="line">        codetype: 题目类型 参考 http:&#x2F;&#x2F;www.chaojiying.com&#x2F;price.html</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        params &#x3D; &#123;</span><br><span class="line">            &#39;codetype&#39;: codetype,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        files &#x3D; &#123;&#39;userfile&#39;: (&#39;ccc.jpg&#39;, im)&#125;</span><br><span class="line">        r &#x3D; requests.post(&#39;http:&#x2F;&#x2F;upload.chaojiying.net&#x2F;Upload&#x2F;Processing.php&#39;, data&#x3D;params, files&#x3D;files, headers&#x3D;self.headers)</span><br><span class="line">        return r.json()</span><br><span class="line"></span><br><span class="line">    def ReportError(self, im_id):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        im_id:报错题目的图片ID</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        params &#x3D; &#123;</span><br><span class="line">            &#39;id&#39;: im_id,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        r &#x3D; requests.post(&#39;http:&#x2F;&#x2F;upload.chaojiying.net&#x2F;Upload&#x2F;ReportError.php&#39;, data&#x3D;params, headers&#x3D;self.headers)</span><br><span class="line">        return r.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">        chaojiying &#x3D; Chaojiying_Client(&#39;1559878380&#39;, &#39;224949826..&#39;, &#39;902931&#39;)#用户中心&gt;&gt;软件ID 生成一个替换 96001</span><br><span class="line">        im &#x3D; open(&#39;a.jpg&#39;, &#39;rb&#39;).read()#本地图片文件路径 来替换 a.jpg 有时WIN系统须要&#x2F;&#x2F;</span><br><span class="line">        print (chaojiying.PostPic(im, 1902))#1902 验证码类型  官方网站&gt;&gt;价格体系 3.4+版 print 后要加()</span><br></pre></td></tr></table></figure><h1 id="五-反爬"><a href="#五-反爬" class="headerlink" title="五.反爬"></a>五.反爬</h1><h2 id="1-selenium自动化操作中检测到security-check问题-cookie时效性差的问题"><a href="#1-selenium自动化操作中检测到security-check问题-cookie时效性差的问题" class="headerlink" title="1. selenium自动化操作中检测到security-check问题(cookie时效性差的问题)"></a>1. selenium自动化操作中检测到security-check问题(cookie时效性差的问题)</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from selenium.webdriver import ChromeOptions  # 可以避免浏览器检测的包</span><br><span class="line">options &#x3D; webdriver.ChromeOptions()  # 实例化</span><br><span class="line">options.add_experimental_option(&#39;excludeSwitches&#39;, [&#39;enable-automation&#39;])  # 给实例化的属性添加一个键值对，这个键值对就可以避免网站检测到是否是爬虫</span><br><span class="line">browser &#x3D; webdriver.Chrome(options&#x3D;options)  # 将该属性传进来</span><br><span class="line"># 最新版(79版)不能使用需要降版本到78版本</span><br></pre></td></tr></table></figure><h1 id="六-Scrapy框架"><a href="#六-Scrapy框架" class="headerlink" title="六.Scrapy框架"></a>六.Scrapy框架</h1><h2 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1.安装"></a>1.安装</h2><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191231103007.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191231103007.png" alt="QQ截图20191231103007"></a></p><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.lfd.uci.edu&#x2F;~gohlke&#x2F;pythonlibs&#x2F;  # twisted的安装网页,目前已经安装好了</span><br></pre></td></tr></table></figure><h2 id="2-五大核心组件与数据流向"><a href="#2-五大核心组件与数据流向" class="headerlink" title="2.五大核心组件与数据流向"></a>2.五大核心组件与数据流向</h2><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191231103504.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20191231103504.png" alt="QQ截图20191231103504"></a></p><ul><li>Scrapy Engine 引擎 负责组件间通信</li><li>Item Pipeline 管道 负责数据持久化</li><li>Downloader 下载器 负责爬取数据</li><li>Scheduler 调度器 负责调度请求</li><li>Spider 爬虫 定义了爬取行为，数据解析规则，提交item给管道</li><li>Downloader Middlewares 下载中间间</li><li>Spider Middlewares 爬虫中间件</li></ul><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/IMG_20191231_104737_1.jpg"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/IMG_20191231_104737_1.jpg" alt="IMG_20191231_104737_1"></a></p><h2 id="3-创建一个项目"><a href="#3-创建一个项目" class="headerlink" title="3.创建一个项目"></a>3.创建一个项目</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject ztb  # 创建scrapy项目名为ztb</span><br><span class="line">scrapy genspider tb baidu.com  # 定义爬虫名字</span><br><span class="line">scrapy crawl tb --nolog  # 启动爬虫项目， --nolog为不显示日志</span><br><span class="line">typ &#x3D; r.xpath(&#39;.&#x2F;p&#x2F;a&#x2F;font[1]&#x2F;text()&#39;).extract_first()  # xpath解析数据为一个对象需要使用extract_first()取出第一个值</span><br></pre></td></tr></table></figure><h2 id="4-获取详情页"><a href="#4-获取详情页" class="headerlink" title="4.获取详情页"></a>4.获取详情页</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class XhSpider(scrapy.Spider):</span><br><span class="line">    name &#x3D; &#39;xh&#39;</span><br><span class="line">    # allowed_domains &#x3D; [&#39;baidu.com&#39;]</span><br><span class="line">    start_urls &#x3D; [&#39;http:&#x2F;&#x2F;www.jokeji.cn&#x2F;list_%s.htm&#39;%page for page in range(1,3)]</span><br><span class="line"></span><br><span class="line">    def com_parse(self,response):  # 接收到详情页的响应</span><br><span class="line">        item &#x3D; response.meta[&#39;item&#39;]  # 将函数parse中的meta中的item取出来赋值给item</span><br><span class="line">        content &#x3D; &#39;&#39;.join(response.xpath(&#39;&#x2F;&#x2F;span[@id&#x3D;&quot;text110&quot;]&#x2F;&#x2F;text()&#39;).extract())  # 将所有文本写入 并且利用字符串的常见操作join拼接到新的字符串中</span><br><span class="line">        item[&#39;content&#39;] &#x3D; content  # 将这个字符串储存在itmen的对应的key中</span><br><span class="line">        yield item  # 返回item值</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        li_list &#x3D; response.xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;list_title&quot;]&#x2F;ul&#x2F;li&#39;)</span><br><span class="line">        for li in li_list:</span><br><span class="line">            title &#x3D; li.xpath(&#39;.&#x2F;b&#x2F;a&#x2F;text()&#39;).extract_first()</span><br><span class="line">            times &#x3D; li.xpath(&#39;.&#x2F;i&#x2F;text()&#39;).extract_first()</span><br><span class="line">            liulan &#x3D; li.xpath(&#39;.&#x2F;span&#x2F;text()&#39;).extract_first()</span><br><span class="line">            url_c &#x3D; &#39;http:&#x2F;&#x2F;www.jokeji.cn&#39; + li.xpath(&#39;.&#x2F;b&#x2F;a&#x2F;@href&#39;).extract_first()</span><br><span class="line">            item &#x3D; XiaohuaItem()</span><br><span class="line">            item[&#39;title&#39;] &#x3D; title</span><br><span class="line">            item[&#39;times&#39;] &#x3D; times</span><br><span class="line">            item[&#39;liulan&#39;] &#x3D; liulan</span><br><span class="line">            yield scrapy.Request(url&#x3D;url_c,callback&#x3D;self.com_parse,meta&#x3D;&#123;&#39;item&#39;:item&#125;)  # 用新的url发送请求，并且利用callback定位到新的函数中，并且把meta的值 以字典的形式传过去</span><br></pre></td></tr></table></figure><h2 id="5-动态获取数据scrapy框架和selenium框架结合使用-网易新闻"><a href="#5-动态获取数据scrapy框架和selenium框架结合使用-网易新闻" class="headerlink" title="5.动态获取数据scrapy框架和selenium框架结合使用(网易新闻)"></a>5.动态获取数据scrapy框架和selenium框架结合使用(网易新闻)</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def process_response(self, request, response, spider):  # 下载中间件的拦截全部响应</span><br><span class="line">    if response.url in spider.start_urls:  # 判断当前路由是否是静态页面的url</span><br><span class="line">        bowor &#x3D; spider.bower  # 从spider中导出实例化的selenium对象</span><br><span class="line">        bowor.get(response.url)  # selenium访问url</span><br><span class="line">        js &#x3D; &#39;window.scrollTo(0, document.body.scrollHeight)&#39;</span><br><span class="line">        for i in range(2):</span><br><span class="line">            bowor.execute_script(js)</span><br><span class="line">            time.sleep(2)</span><br><span class="line">        html &#x3D; bowor.page_source  # 获取网页源码</span><br><span class="line">        return HtmlResponse(url&#x3D;bowor.current_url,body&#x3D;html,request&#x3D;request, encoding&#x3D;&#39;utf-8&#39;)  # 返回一个response对象 current_url为selenium当前访问的url,body为网页源码 HtmlResponse需要导包  from scrapy.http import HtmlResponse</span><br><span class="line">    return response</span><br><span class="line"># 需要打开settings的下载中间件，切记别打开错误的中间件，不然中间件不会被启用</span><br></pre></td></tr></table></figure><h2 id="6-数据持久化"><a href="#6-数据持久化" class="headerlink" title="6.数据持久化"></a>6.数据持久化</h2><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20200103102800.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20200103102800.png" alt="QQ截图20200103102800"></a></p><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20200103103109.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20200103103109.png" alt="QQ截图20200103103109"></a></p><h2 id="7-数据持久化的MongoDB的正规写法-管道"><a href="#7-数据持久化的MongoDB的正规写法-管道" class="headerlink" title="7.数据持久化的MongoDB的正规写法(管道)"></a>7.数据持久化的MongoDB的正规写法(管道)</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import pymongo  # 导包，需要mongo</span><br><span class="line">class QuanzhanPaquPipeline(object):  # 管道中自带class类</span><br><span class="line"></span><br><span class="line">    def __init__(self, mongo_uri, mongo_db):  # 初始化</span><br><span class="line">        self.mongo_uri &#x3D; mongo_uri</span><br><span class="line">        self.mongo_db &#x3D; mongo_db</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def from_crawler(cls, crawler):</span><br><span class="line">        return cls(</span><br><span class="line">            mongo_uri &#x3D; crawler.settings.get(&#39;MONGOURI&#39;),  # 在settings中配置的文件</span><br><span class="line">            mongo_db &#x3D; crawler.settings.get(&#39;MONGODB&#39;)  # uri为数据库地址，db为这次的库名</span><br><span class="line">        )</span><br><span class="line">    def open_spider(self):  # 启动爬虫时，该函数执行 连接上数据库(还有一个start_spider方法)</span><br><span class="line">        self.client &#x3D; pymongo.MongoClient(self.mongo_uri)  # mongo连接</span><br><span class="line">        self.db &#x3D; self.client[self.mongo_db]  # 创建数据库</span><br><span class="line">    def process_item(self, item, spider):  # 添加数据的时候启动</span><br><span class="line">        self.db[&#39;qz&#39;].insert_one(dict(item))  # 将数据写入到qz的表中</span><br><span class="line">        return item</span><br><span class="line">    def close_spider(self, spider):  # 爬虫结束时运行</span><br><span class="line">        self.client.close()  # 关闭数据库</span><br></pre></td></tr></table></figure><h2 id="9-全栈数据爬取"><a href="#9-全栈数据爬取" class="headerlink" title="9.全栈数据爬取"></a>9.全栈数据爬取</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#创建项目的时候</span><br><span class="line">scrapy startproject 项目名  # 创建项目</span><br><span class="line">scrapy genspider -t crawl 爬虫名 baidu.com  # 创建爬虫名</span><br></pre></td></tr></table></figure><h2 id="10-框架封装cookie"><a href="#10-框架封装cookie" class="headerlink" title="10.框架封装cookie"></a>10.框架封装cookie</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line">cookoe_str &#x3D; &#39;一个网页的cookie值&#39;</span><br><span class="line">cookies &#x3D; dict()</span><br><span class="line">from item in cookie_str.split(&#39;;&#39;)  # cookie值中每个key和value中有；分开</span><br><span class="line">key,value &#x3D; item.split(&#39;&#x3D;&#39;,1)  # 只分割一次</span><br><span class="line">    cookies[key] &#x3D; value</span><br><span class="line">class 爬虫():</span><br><span class="line">    ......</span><br><span class="line">    def start_request(self):</span><br><span class="line">        yield scrapy.Request(url&#x3D;self.start_urls[0], cookies&#x3D;cookies)</span><br></pre></td></tr></table></figure><p><a href="file:///D:/%5C%E8%B5%84%E6%96%99%5C%E7%AC%AC%E5%85%AD%E4%B8%AA%E6%9C%88%5Cmd%E5%9B%BE%E7%89%87%5CQQ%E6%88%AA%E5%9B%BE20200112192742.png"><img src="file:///D:/%5C%E8%B5%84%E6%96%99%5C%E7%AC%AC%E5%85%AD%E4%B8%AA%E6%9C%88%5Cmd%E5%9B%BE%E7%89%87%5CQQ%E6%88%AA%E5%9B%BE20200112192742.png" alt="QQ截图20200112192742"></a></p><h1 id="七-中间件"><a href="#七-中间件" class="headerlink" title="七.中间件"></a>七.中间件</h1><p><a href="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20200102103800.png"><img src="https://baizixuan.gitee.io/my_technology_blog_hexo/markdown_img/QQ%E6%88%AA%E5%9B%BE20200102103800.png" alt="QQ截图20200102103800"></a></p><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在middleware中,中间件的函数意思</span><br><span class="line">process_request : 拦截的是非异常请求,一般可以在这里更换UA和代理IP</span><br><span class="line">process_response : 拦截的是所有响应，一般在这里可以配合selenium框架使用动态页面的抓取</span><br><span class="line">process_exception : 拦截的是异常请求</span><br></pre></td></tr></table></figure><h2 id="1-UA池"><a href="#1-UA池" class="headerlink" title="1.UA池"></a>1.UA池</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from fake_useragent import UserAgent  # 导包</span><br><span class="line">ua &#x3D; UserAgent()  # 实例化UserAgent方法</span><br><span class="line">ua_list &#x3D; []  # 创建一个空列表</span><br><span class="line">for i in range(200):  # 循环200次，获取200个UA</span><br><span class="line">    ua_list.append(ua.Chrome)</span><br></pre></td></tr></table></figure><h2 id="2-拦截之后更换IP"><a href="#2-拦截之后更换IP" class="headerlink" title="2.拦截之后更换IP"></a>2.拦截之后更换IP</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def process_request(self, request, spider):  # 在middlewares中，拦截非异常请求</span><br><span class="line">    request.meta[&#39;proxy&#39;] &#x3D; &#39;http:&#x2F;&#x2F;60.13.42.175:9999&#39;  # 前面为固定格式，后面写需要代理的ip</span><br><span class="line">    request.meta[&#39;proxy&#39;] &#x3D; &#39;http:&#x2F;&#x2F;%s&#39;%(random.choice(代理ip池))</span><br><span class="line">    return None</span><br></pre></td></tr></table></figure><h2 id="3-拦截之后更换UA"><a href="#3-拦截之后更换UA" class="headerlink" title="3.拦截之后更换UA"></a>3.拦截之后更换UA</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def process_request(self, request, spider):  # 在middlewares中，拦截非异常请求</span><br><span class="line">    request.headers[&#39;User-Agent&#39;] &#x3D; &#39;&#39;  # 前面为固定格式，后面写需要的UA</span><br><span class="line">    request.headers[&#39;User-Agent&#39;] &#x3D; &#39;%s&#39;%(random.choice(UA池))</span><br><span class="line">    return None</span><br><span class="line"># 然后可以在response函数中print(response.headers)打印显示</span><br></pre></td></tr></table></figure><h1 id="八-增量式爬虫和深度爬虫"><a href="#八-增量式爬虫和深度爬虫" class="headerlink" title="八.增量式爬虫和深度爬虫"></a>八.增量式爬虫和深度爬虫</h1><h2 id="1-增量式爬虫"><a href="#1-增量式爬虫" class="headerlink" title="1.增量式爬虫"></a>1.增量式爬虫</h2><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在提交请求或者保存数据的时候，判断是否存储过该url或者数据</span><br><span class="line"># 利用redis数据库的集合特点，如果没有返回1并将数据存储在数据库中</span><br><span class="line"># from redis import Redis 导包</span><br><span class="line"># 实例化一个Redis</span><br><span class="line"># ret &#x3D; conn(实例化的对象).sadd(&#39;key&#39;,&#39;value&#39;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-基础&quot;&gt;&lt;a href=&quot;#一-基础&quot; class=&quot;headerlink&quot; title=&quot;一.基础&quot;&gt;&lt;/a&gt;一.基础&lt;/h1&gt;&lt;h2 id=&quot;1-什么是爬虫&quot;&gt;&lt;a href=&quot;#1-什么是爬虫&quot; class=&quot;headerlink&quot; title=&quot;1.什么是爬虫&quot;&gt;&lt;/a&gt;1.什么是爬虫&lt;/h2&gt;&lt;p&gt;网络爬虫（又被称为网页蜘蛛，网络机器人）就是 模拟客户端(主要指浏览器)发送网络请求，接收请求响应，按照一定的规则，自动地抓取互联网信息的程 序。原则上,只要是客户端(主要指浏览器)能做的事情，爬虫都能够做&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="https://Sun-JunYu.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="https://Sun-JunYu.github.io/tags/python/"/>
    
      <category term="爬虫" scheme="https://Sun-JunYu.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>vue基础语法</title>
    <link href="https://sun-junyu.github.io/posts/468ef951/"/>
    <id>https://sun-junyu.github.io/posts/468ef951/</id>
    <published>2020-03-06T16:00:00.000Z</published>
    <updated>2020-04-23T05:58:36.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue是什么"><a href="#vue是什么" class="headerlink" title="vue是什么"></a>vue是什么</h2><p>​    Vue是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应        用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当现代化的工具链与以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><p>中文文档：<a href="https://cn.vuejs.org/v2/guide/syntax.html">https://cn.vuejs.org/v2/guide/syntax.html</a></p><a id="more"></a><h1 id="Vue安装"><a href="#Vue安装" class="headerlink" title="Vue安装"></a>Vue安装</h1><p>由于vue项目依赖 node.js npm 需要先安装. 若没有请先安装;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli     -g表示全局安装，vue-cli是模块，全局安装的模块可以在命令行直接使用</span><br></pre></td></tr></table></figure><p>由于npm网站在国内速度非常慢，所以可以在命令后面加上淘宝的镜像 即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>之后，可以vue –V查看vue是否安装好，出现版本号即安装成功。</p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.vue init webpack 项目名   &#x2F;&#x2F;创建vue项目</span><br><span class="line"></span><br><span class="line">Project name —&gt; 项目名称 （非必填，默认上面的项目名） </span><br><span class="line">Project description —&gt; 项目描述 （非必填） </span><br><span class="line">Author —&gt; 作者（非必填）</span><br><span class="line"></span><br><span class="line">2.cd vue-test   &#x2F;&#x2F;进入项目目录</span><br><span class="line">3.npm install   &#x2F;&#x2F;安装依赖</span><br><span class="line">4.npm run dev   &#x2F;&#x2F;启动服务</span><br></pre></td></tr></table></figure><h2 id="vue基础语法"><a href="#vue基础语法" class="headerlink" title="vue基础语法"></a>vue基础语法</h2><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><p>​    v-html 的特点可以执行和渲染html标签，它跟v-text 的区别就在此</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-html&#x3D;&#39;msg&#39;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>​    简单的判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 v-show&#x3D;&#39;ok&#39;&gt;阳光明媚&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure><h2 id="v-if、v-else-if、v-else"><a href="#v-if、v-else-if、v-else" class="headerlink" title="v-if、v-else-if、v-else"></a>v-if、v-else-if、v-else</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;狗&#39;&quot;&gt;狗&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;猫&#39;&quot;&gt;B&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-else&gt;</span><br><span class="line">            既不是狗，也不是猫。</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;(item,index) in tlist&quot;&gt;</span><br><span class="line">    &#123;&#123; item.test &#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><h2 id="监听属性"><a href="#监听属性" class="headerlink" title="监听属性"></a>监听属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">      counter:function(nval,oval)&#123;</span><br><span class="line">          console.log(&#39;计数器由&#39;+oval+&#39;变换为新的&#39;+nval);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    &#x2F;&#x2F; 反转</span><br><span class="line">    reverse_msg:function()&#123;</span><br><span class="line">        console.log(this.msg.split(&#39;&#39;));</span><br><span class="line">        return this.msg.split(&#39;&#39;).reverse().join(&#39;&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="购物车小案例"><a href="#购物车小案例" class="headerlink" title="购物车小案例"></a>购物车小案例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 购物车 --&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;tr&gt; &lt;td&gt;名称&lt;&#x2F;td&gt; &lt;td&gt;数量&lt;&#x2F;td&gt; &lt;td&gt;价格&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;tr v-for&#x3D;&quot;(item,index) in tlist&quot;&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &#123;&#123; item.test &#125;&#125;</span><br><span class="line">                &lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;button @click&#x3D;&quot;minus(index,1)&quot;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&#39;item.num&#39;&gt;</span><br><span class="line">                    &lt;button @click&#x3D;&quot;minus(index,0)&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">                &lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &#123;&#123; item.prict &#125;&#125;</span><br><span class="line">                &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line">        总数量：&#123;&#123; totalCount()[0] &#125;&#125; &lt;br&#x2F;&gt;</span><br><span class="line">        总价格：&#123;&#123; totalCount()[1] &#125;&#125;&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                tlist:[&#123;test:&#39;电脑&#39;,num:3,prict:9000&#125;,&#123;test:&#39;鼠标&#39;,num:3,prict:100&#125;,&#123;test:&#39;键盘&#39;,num:3,prict:200&#125;,&#123;test:&#39;耳机&#39;,num:3,prict:90&#125;],</span><br><span class="line"></span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 自定义方法</span><br><span class="line">        methods:&#123;</span><br><span class="line">            &#x2F;&#x2F; 购物车总汇</span><br><span class="line">            totalCount:function()&#123;</span><br><span class="line">                &#x2F;&#x2F; 默认数量</span><br><span class="line">                let total &#x3D; 0;</span><br><span class="line">                let prict &#x3D; 0;</span><br><span class="line">                &#x2F;&#x2F;遍历</span><br><span class="line">                for (let i&#x3D;0,l&#x3D;this.tlist.length;i&lt;l;i++)&#123;</span><br><span class="line">                    &#x2F;&#x2F; 汇总</span><br><span class="line">                    total +&#x3D; this.tlist[i].num;</span><br><span class="line">                    prict +&#x3D; (this.tlist[i].num * this.tlist[i].prict);</span><br><span class="line">                &#125;</span><br><span class="line">                return [total,prict]</span><br><span class="line">            &#125;,</span><br><span class="line">            minus:function(index,on)&#123;</span><br><span class="line">                if (on)&#123;</span><br><span class="line">                    if (this.tlist[index].num&gt;0)&#123;</span><br><span class="line">                        this.tlist[index].num--;</span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                    this.tlist[index].num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>执行效果：</p><p><img src="http://q92ekyelb.bkt.clouddn.com/vue%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%88%E6%9E%9C.png" alt="购物车效果图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vue是什么&quot;&gt;&lt;a href=&quot;#vue是什么&quot; class=&quot;headerlink&quot; title=&quot;vue是什么&quot;&gt;&lt;/a&gt;vue是什么&lt;/h2&gt;&lt;p&gt;​    Vue是一套用于构建用户界面的&lt;strong&gt;渐进式框架&lt;/strong&gt;。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应        用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当现代化的工具链与以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。&lt;/p&gt;
&lt;p&gt;中文文档：&lt;a href=&quot;https://cn.vuejs.org/v2/guide/syntax.html&quot;&gt;https://cn.vuejs.org/v2/guide/syntax.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://Sun-JunYu.github.io/categories/vue/"/>
    
    
      <category term="vue基础" scheme="https://Sun-JunYu.github.io/tags/vue%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>git的基本操作</title>
    <link href="https://sun-junyu.github.io/posts/7eb35566/"/>
    <id>https://sun-junyu.github.io/posts/7eb35566/</id>
    <published>2020-03-04T16:00:00.000Z</published>
    <updated>2020-04-22T03:06:15.816Z</updated>
    
    <content type="html"><![CDATA[<p>git init    #初始化<br>git pull     # 从远程仓库拉到本地<br>git remote add origin  <a href="https://gitee.com/privatecloud-1/privatecloud.git">https://gitee.com/privatecloud-1/privatecloud.git</a>  #  连接远程仓库<br>git checkout zyj   #切换分支</p><a id="more"></a><p>git add -A dashixun  #上传文件<br>git commit -m ‘1231’   # 备注<br>git push  #提交<br>git clone -b “分支名字”</p><h3 id="备用知识点-建项目着-如果想让其他人通过输入账号密码才能上传文件-则输入如下命令-这些命令用不到"><a href="#备用知识点-建项目着-如果想让其他人通过输入账号密码才能上传文件-则输入如下命令-这些命令用不到" class="headerlink" title="备用知识点 建项目着 如果想让其他人通过输入账号密码才能上传文件 则输入如下命令  (这些命令用不到)"></a>备用知识点 建项目着 如果想让其他人通过输入账号密码才能上传文件 则输入如下命令  (这些命令用不到)</h3><p>插入如下代码使项目中的组员每次修改数据都要输入账号和密码：</p><ul><li>git config –global user.name [username]</li><li>git config –global user.password [userpassword]</li><li>PS：想要保存密码，则需要插入如下代码： git config –global credential.helper store。</li></ul><p>常用操作<br><a href="https://www.cnblogs.com/chenhuichao/p/9631754.html">https://www.cnblogs.com/chenhuichao/p/9631754.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git init    #初始化&lt;br&gt;git pull     # 从远程仓库拉到本地&lt;br&gt;git remote add origin  &lt;a href=&quot;https://gitee.com/privatecloud-1/privatecloud.git&quot;&gt;https://gitee.com/privatecloud-1/privatecloud.git&lt;/a&gt;  #  连接远程仓库&lt;br&gt;git checkout zyj   #切换分支&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://Sun-JunYu.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://Sun-JunYu.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>三方登录</title>
    <link href="https://sun-junyu.github.io/posts/b9330e24/"/>
    <id>https://sun-junyu.github.io/posts/b9330e24/</id>
    <published>2020-03-04T16:00:00.000Z</published>
    <updated>2020-04-21T06:14:24.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三方登陆"><a href="#第三方登陆" class="headerlink" title="第三方登陆"></a>第三方登陆</h1><h2 id="1-微博登陆"><a href="#1-微博登陆" class="headerlink" title="1.微博登陆"></a>1.微博登陆</h2><a id="more"></a><ol><li>vue向接口发送请求</li></ol><p>Code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;https:&#x2F;&#x2F;api.weibo.com&#x2F;oauth2&#x2F;authorize?client_id&#x3D;297351690&amp;redirect_uri&#x3D;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;weibo_callback&#39;</span><br></pre></td></tr></table></figure><ol><li>微博回调接口</li></ol><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 新浪微博回调</span><br><span class="line">def wb_back(request):</span><br><span class="line">    # 获取code</span><br><span class="line">    code &#x3D; request.GET.get(&#39;code&#39;)</span><br><span class="line">    # 定义微博认证地址</span><br><span class="line">    data &#x3D; &#123;</span><br><span class="line">        &#39;client_id&#39;: &#39;297351690&#39;,</span><br><span class="line">        &#39;client_secret&#39;: &#39;8e24e86fd5dfa8d95675316bd969f9f1&#39;,</span><br><span class="line">        &#39;grant_type&#39;: &#39;authorization_code&#39;,</span><br><span class="line">        &#39;code&#39;: code,</span><br><span class="line">        &#39;redirect_uri&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;weibo_callback&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    url &#x3D; &#39;https:&#x2F;&#x2F;api.weibo.com&#x2F;oauth2&#x2F;access_token&#39;</span><br><span class="line"></span><br><span class="line">    res &#x3D; requests.post(url, data&#x3D;data).text</span><br><span class="line">    res &#x3D; json.loads(res)</span><br><span class="line">    # return HttpResponse(res[&#39;uid&#39;])</span><br><span class="line"></span><br><span class="line">    # 获取新浪微博用户名</span><br><span class="line">    result &#x3D; requests.get(url&#x3D;&#39;https:&#x2F;&#x2F;api.weibo.com&#x2F;2&#x2F;users&#x2F;show.json&#39;,</span><br><span class="line">                          params&#x3D;&#123;&#39;access_token&#39;: res[&#39;access_token&#39;], &#39;uid&#39;: res[&#39;uid&#39;]&#125;)</span><br><span class="line">    result &#x3D; json.loads(result.text)</span><br><span class="line">    # print(result)</span><br><span class="line"></span><br><span class="line">    # 判断该用户曾经是否登陆过</span><br><span class="line">    user &#x3D; User.objects.filter(username&#x3D;str(result[&#39;name&#39;])).first()</span><br><span class="line">    sina_id &#x3D; &#39;&#39;</span><br><span class="line">    user_id &#x3D; &#39;&#39;</span><br><span class="line"></span><br><span class="line">    if user:</span><br><span class="line">        sina_id &#x3D; user.username</span><br><span class="line">        user_id &#x3D; user.id</span><br><span class="line">    else:</span><br><span class="line">        # 手动创建账号</span><br><span class="line">        User.objects.create(username&#x3D;str(result[&#39;name&#39;]), password&#x3D;&#39;&#39;)</span><br><span class="line">        sina_id &#x3D; result[&#39;name&#39;]</span><br><span class="line">        user &#x3D; User.objects.filter(username&#x3D;str(result[&#39;name&#39;])).first()</span><br><span class="line">        user_id &#x3D; user.id</span><br><span class="line">    print(user_id)</span><br><span class="line">    return redirect(&#39;http:&#x2F;&#x2F;localhost:8080&#x2F;?sina_id&#x3D;&#39; + str(sina_id) + &#39;&amp;user_id&#x3D;&#39; + str(user_id))</span><br></pre></td></tr></table></figure><h2 id="2-钉钉登陆"><a href="#2-钉钉登陆" class="headerlink" title="2.钉钉登陆"></a>2.钉钉登陆</h2><ol><li>vue发送接口请求</li></ol><p>Code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;connect&#x2F;qrconnect?appid&#x3D;dingoaty1hbauyiitjsip2&amp;response_type&#x3D;code&amp;scope&#x3D;snsapi_login&amp;state&#x3D;STATE&amp;redirect_uri&#x3D;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;dingding_callback&#39;</span><br></pre></td></tr></table></figure><ol><li>回调接口</li></ol><p>Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 钉钉回调</span><br><span class="line">def ding_back(request):</span><br><span class="line">    code &#x3D; request.GET.get(&#39;code&#39;)</span><br><span class="line">    t &#x3D; time.time()</span><br><span class="line">    # 时间戳</span><br><span class="line">    timestamp &#x3D; str((int(round(t * 1000))))</span><br><span class="line">    appSecret &#x3D; &#39;kFeBIcAi-P5VNeA_2EIjARQu6dYct2h-3iiTUNpPEBuWjN3efumu2BfLhBgGVttz&#39;</span><br><span class="line">    # 构造签名</span><br><span class="line">    signature &#x3D; base64.b64encode(</span><br><span class="line">        hmac.new(appSecret.encode(&#39;utf-8&#39;), timestamp.encode(&#39;utf-8&#39;), digestmod&#x3D;sha256).digest())</span><br><span class="line">    # 请求接口，换取钉钉用户名</span><br><span class="line">    payload &#x3D; &#123;&#39;tmp_auth_code&#39;: code&#125;</span><br><span class="line">    headers &#x3D; &#123;&#39;Content-Type&#39;: &#39;application&#x2F;json&#39;&#125;</span><br><span class="line">    res &#x3D; requests.post(&#39;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;sns&#x2F;getuserinfo_bycode?signature&#x3D;&#39; + urllib.parse.quote(</span><br><span class="line">        signature.decode(&quot;utf-8&quot;)) + &quot;&amp;timestamp&#x3D;&quot; + timestamp + &quot;&amp;accessKey&#x3D;dingoaty1hbauyiitjsip2&quot;,</span><br><span class="line">                        data&#x3D;json.dumps(payload), headers&#x3D;headers)</span><br><span class="line"></span><br><span class="line">    res_dict &#x3D; json.loads(res.text)</span><br><span class="line">    user &#x3D; User.objects.filter(username&#x3D;str(res_dict[&#39;user_info&#39;][&#39;nick&#39;])).first()</span><br><span class="line">    dingding_id &#x3D; &#39;&#39;</span><br><span class="line">    user_id &#x3D; &#39;&#39;</span><br><span class="line">    if user:</span><br><span class="line">        dingding_id &#x3D; res_dict[&#39;user_info&#39;][&#39;nick&#39;]</span><br><span class="line">        user_id &#x3D; user.id</span><br><span class="line">    else:</span><br><span class="line">        User.objects.create(username&#x3D;str(res_dict[&#39;user_info&#39;][&#39;nick&#39;]), password&#x3D;&#39;&#39;)</span><br><span class="line">        user &#x3D; User.objects.filter(username&#x3D;str(res_dict[&#39;user_info&#39;][&#39;nick&#39;])).first()</span><br><span class="line">        dingding_id &#x3D; res_dict[&#39;user_info&#39;][&#39;nick&#39;]</span><br><span class="line">        user_id &#x3D; user.id</span><br><span class="line"></span><br><span class="line">    return redirect(&#39;http:&#x2F;&#x2F;localhost:8080&#x2F;?dingding_id&#x3D;&#39; + str(dingding_id) + &#39;&amp;&#39; + &#39;uid&#x3D;&#39; + str(user_id))</span><br></pre></td></tr></table></figure><p>#3.支付宝登陆</p><ol><li><p>电脑网站支付文档： <a href="https://docs.open.alipay.com/270">https://docs.open.alipay.com/270</a></p></li><li><p>快速接入：<a href="https://docs.open.alipay.com/270/105899/">https://docs.open.alipay.com/270/105899/</a></p></li><li><p>私钥：加密</p></li><li><p>公钥：解密</p></li><li><p>API列表：<a href="https://docs.open.alipay.com/270/105900/">https://docs.open.alipay.com/270/105900/</a></p><ul><li>统一收单下单并支付页面接口：alipay.trade.page.pay</li><li>统一收单线下交易查询接口：alipay.trade.query</li><li>公共参数：sing_type,sing.</li><li>请求参数：和业务相关。<code>out_trade_no</code>:订单号。</li><li>线下查询：特殊可选参数，两个参数，添一个就行（订单号 或 支付宝号）。</li></ul></li><li><p>SDK的使用：<a href="https://github.com/fzlee/alipay/blob/master/README.zh-hans.md">https://github.com/fzlee/alipay/blob/master/README.zh-hans.md</a></p></li><li><p>签名，使用SDK时，会自动处理签名</p></li><li><p>SDK:</p><ul><li><p>安装：pip install python-alipay-sdk –upgrade</p></li><li><p>在支付宝中设置密码，公钥私钥</p><p>​</p><p>Python</p><p>​</p><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">from alipay import AliPay, DCAliPay, ISVAliPay  # 导包</span><br><span class="line"></span><br><span class="line">app_private_key_string &#x3D; open(os.path.join(路径)).read()</span><br><span class="line">alipay_public_key_string &#x3D; open(os.path.join()).read()</span><br><span class="line"></span><br><span class="line">app_private_key_string &#x3D;&#x3D; &quot;&quot;&quot;  # 第三方包需要填写  在钥匙的上下写</span><br><span class="line">    -----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">        base64 encoded content</span><br><span class="line">    -----END RSA PRIVATE KEY-----</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">alipay_public_key_string &#x3D;&#x3D; &quot;&quot;&quot;</span><br><span class="line">    -----BEGIN PUBLIC KEY-----</span><br><span class="line">    base64 encoded content</span><br><span class="line">    -----END PUBLIC KEY-----</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">alipay &#x3D; AliPay(</span><br><span class="line">    appid&#x3D;&quot;&quot;,</span><br><span class="line">    app_notify_url&#x3D;None,  # the default notify path</span><br><span class="line">    app_private_key_string&#x3D;app_private_key_string,</span><br><span class="line">    # alipay public key, do not use your own public key!</span><br><span class="line">    alipay_public_key_string&#x3D;alipay_public_key_string,</span><br><span class="line">    sign_type&#x3D;&quot;RSA&quot;, # RSA or RSA2</span><br><span class="line">    debug&#x3D;False  # False by default.如果是沙箱环境。配置为True</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">    # 如果你是Python 2用户（考虑考虑升级到Python 3吧），请确保非ascii的字符串为utf8编码：</span><br><span class="line">    subject &#x3D; u&quot;测试订单&quot;.encode(&quot;utf8&quot;)</span><br><span class="line">    # 如果你是 Python 3的用户，使用默认的字符串即可</span><br><span class="line">    subject &#x3D; &quot;测试订单&quot;</span><br><span class="line">    </span><br><span class="line">    # 电脑网站支付，需要跳转到https:&#x2F;&#x2F;openapi.alipay.com&#x2F;gateway.do? + order_string</span><br><span class="line">    order_string &#x3D; alipay.api_alipay_trade_page_pay(</span><br><span class="line">        out_trade_no&#x3D;&quot;20161112&quot;,</span><br><span class="line">        total_amount&#x3D;0.01,</span><br><span class="line">        subject&#x3D;subject,</span><br><span class="line">        return_url&#x3D;&quot;https:&#x2F;&#x2F;example.com&quot;,</span><br><span class="line">        notify_url&#x3D;&quot;https:&#x2F;&#x2F;example.com&#x2F;notify&quot; # 可选, 不填则使用默认notify url</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    pay_url &#x3D; &quot;https:&#x2F;&#x2F;openapi.alipay.com&#x2F;gateway.do?&quot; + order_string</span><br></pre></td></tr></table></figure></li><li><p>打开支付页面地址：<code>window.open(pay_url)</code></p></li><li><p>统一收单线下交易查询：<code>alipay.trade.query</code></p><p>​</p><p>Python</p><p>​</p><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 支付接口</span><br><span class="line">app_private_key_string &#x3D; open(os.path.join(settings.BASE_DIR,&quot;utils&quot;,&quot;key&quot;,&quot;app_private_key.txt&quot;)).read()</span><br><span class="line">alipay_public_key_string &#x3D; open(os.path.join(settings.BASE_DIR,&quot;utils&quot;,&quot;key&quot;,&quot;alipay_public_key.txt&quot;)).read()</span><br></pre></td></tr></table></figure></li></ul></li></ol><pre><code>app_private_key_string == &quot;&quot;&quot;    -----BEGIN RSA PRIVATE KEY-----    base64 encoded content    -----END RSA PRIVATE KEY-----&quot;&quot;&quot;alipay_public_key_string == &quot;&quot;&quot;    -----BEGIN PUBLIC KEY-----    base64 encoded content    -----END PUBLIC KEY-----&quot;&quot;&quot;alipay = AliPay(    appid=&quot;2016101700704372&quot;,    app_notify_url=&quot;http://127.0.0.1:8001/app/alipay_callback/&quot;,  # 默认回调url    app_private_key_string=app_private_key_string,    # 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,    alipay_public_key_string=alipay_public_key_string,    sign_type=&quot;RSA2&quot;, # RSA 或者 RSA2    debug=False  # 默认False)class AlipayAPIView(APIView):    def post(self, request):        # 如果你是Python 2用户（考虑考虑升级到Python 3吧），请确保非ascii的字符串为utf8编码：        # subject = u&quot;测试订单&quot;.encode(&quot;utf8&quot;)        # 如果你是 Python 3的用户，使用默认的字符串即可        subject = &quot;XXX商家——护目镜&quot;        # 电脑网站支付，需要跳转到https://openapi.alipay.com/gateway.do? + order_string        order_string = alipay.api_alipay_trade_page_pay(            out_trade_no=&quot;1906B00005&quot;,            total_amount=9.01,            subject=subject,            return_url=&quot;http://127.0.0.1:8001/app/alipay_callback/&quot;,            notify_url=&quot;http://127.0.0.1:8001/app/alipay_callback/&quot;  # 可选, 不填则使用默认notify url        )        # 支付页面的路由.返回给vue。 vue引导用户访问这个路由，进行支付        # windows.location.href=&quot;&quot;        pay_url = &quot;https://openapi.alipaydev.com/gateway.do?&quot; + order_string        print(pay_url)        return Response({            &quot;code&quot;: 200,            &quot;url&quot;: pay_url        })```</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第三方登陆&quot;&gt;&lt;a href=&quot;#第三方登陆&quot; class=&quot;headerlink&quot; title=&quot;第三方登陆&quot;&gt;&lt;/a&gt;第三方登陆&lt;/h1&gt;&lt;h2 id=&quot;1-微博登陆&quot;&gt;&lt;a href=&quot;#1-微博登陆&quot; class=&quot;headerlink&quot; title=&quot;1.微博登陆&quot;&gt;&lt;/a&gt;1.微博登陆&lt;/h2&gt;
    
    </summary>
    
    
      <category term="三方登录" scheme="https://Sun-JunYu.github.io/categories/%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    
    
      <category term="vue" scheme="https://Sun-JunYu.github.io/tags/vue/"/>
    
      <category term="django" scheme="https://Sun-JunYu.github.io/tags/django/"/>
    
      <category term="三方登录" scheme="https://Sun-JunYu.github.io/tags/%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>python的数据结构</title>
    <link href="https://sun-junyu.github.io/posts/2ff1809f/"/>
    <id>https://sun-junyu.github.io/posts/2ff1809f/</id>
    <published>2020-02-29T16:00:00.000Z</published>
    <updated>2020-04-21T06:13:29.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于数据结构"><a href="#关于数据结构" class="headerlink" title="关于数据结构"></a>关于数据结构</h1><p>什么是数据结构？</p><p>简单地说，数据结构是以某种特定的布局方式存储数据的容器。这种“布局方式”决定了数据结构对于某些操作是高效的，而对于其他操作则是低效的。首先我们需要理解各种数据结构，才能在处理实际问题时选取最合适的数据结构。</p><a id="more"></a><p>为什么我们需要数据结构？</p><p>数据是计算机科学当中最关键的实体，而数据结构则可以将数据以某种组织形式存储，因此，数据结构的价值不言而喻。</p><p>无论你以何种方式解决何种问题，你都需要处理数据——无论是涉及员工薪水、股票价格、购物清单，还是只是简单的电话簿问题。</p><p>数据需要根据不同的场景，按照特定的格式进行存储。有很多数据结构能够满足以不同格式存储数据的需求。</p><p>常见的数据结构</p><p>首先列出一些最常见的数据结构，我们将逐一说明：</p><p>数组 栈 队列 链表 树 字典树（这是一种高效的树形结构，但值得单独说明） 散列表（哈希表）</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是最简单、也是使用最广泛的数据结构。栈、队列等其他数据结构均由数组演变而来。下图是一个包含元素（1，2，3和4）的简单数组，数组长度为4。</p><p>每个数据元素都关联一个正数值，我们称之为索引，它表明数组中每个元素所在的位置。大部分语言将初始索引定义为零。</p><p>以下是数组的两种类型：</p><p>一维数组（如上所示） 多维数组（数组的数组）</p><p>数组的基本操作</p><p>Insert——在指定索引位置插入一个元素 Get——返回指定索引位置的元素 Delete——删除指定索引位置的元素 Size——得到数组所有元素的数量</p><p>面试中关于数组的常见问题</p><p>寻找数组中第二小的元素 找到数组中第一个不重复出现的整数 合并两个有序数组 重新排列数组中的正值和负值</p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>著名的撤销操作几乎遍布任意一个应用。但你有没有思考过它是如何工作的呢？这个问题的解决思路是按照将最后的状态排列在先的顺序，在内存中存储历史工作状态（当然，它会受限于一定的数量）。这没办法用数组实现。但有了栈，这就变得非常方便了。</p><p>可以把栈想象成一列垂直堆放的书。为了拿到中间的书，你需要移除放置在这上面的所有书。这就是LIFO（后进先出）的工作原理。</p><p>下图是包含三个数据元素（1，2和3）的栈，其中顶部的3将被最先移除：</p><p>栈的基本操作</p><p>Push——在顶部插入一个元素 Pop——返回并移除栈顶元素 isEmpty——如果栈为空，则返回true Top——返回顶部元素，但并不移除它</p><p>面试中关于栈的常见问题</p><p>使用栈计算后缀表达式 对栈的元素进行排序 判断表达式是否括号平衡</p><p>应用场景：逆序输出，语法检查，进制转换</p><p>在我们日常编程中，括号都是成对出现的，比如“()”“[]”“{}”“&lt;&gt;”这些成对出现的符号</p><p>那么具体处理的方法就是:凡是遇到括号的前半部分，即把这个元素入栈，凡是遇到括号的后半部分就比对栈顶元素是否该元素相匹配，如果匹配，则前半部分出栈，否则就是匹配出错</p><p>将十进制的数转换为2-9的任意进制的数</p><p>我们都知道，通过求余法，可以将十进制数转换为其他进制，比如要转为八进制，将十进制数除以8，记录余数，然后继续将商除以8，一直到商等于0为止，最后将余数倒着写数来就可以了。</p><p>比如100的八进制，100首先除以8商12余4,4首先进栈，然后12除以8商1余4，第二个余数4进栈，接着1除以8，商0余1，第三个余数1进栈，最后将三个余数出栈，就得到了100的八进制数144,</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>与栈相似，队列是另一种顺序存储元素的线性数据结构。栈与队列的最大差别在于栈是LIFO（后进先出），而队列是FIFO，即先进先出。</p><p>一个完美的队列现实例子：售票亭排队队伍。如果有新人加入，他需要到队尾去排队，而非队首——排在前面的人会先拿到票，然后离开队伍。</p><p>下图是包含四个元素（1，2，3和4）的队列，其中在顶部的1将被最先移除：</p><p>移除先入队的元素、插入新元素</p><p>队列的基本操作</p><p>Enqueue()——在队列尾部插入元素 Dequeue()——移除队列头部的元素 isEmpty()——如果队列为空，则返回true Top()——返回队列的第一个元素</p><p>面试中关于队列的常见问题</p><p>使用队列表示栈 对队列的前k个元素倒序 使用队列生成从1到n的二进制数</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表是另一个重要的线性数据结构，乍一看可能有点像数组，但在内存分配、内部结构以及数据插入和删除的基本操作方面均有所不同。</p><p>链表就像一个节点链，其中每个节点包含着数据和指向后续节点的指针。 链表还包含一个头指针，它指向链表的第一个元素，但当列表为空时，它指向null或无具体内容。</p><p>链表一般用于实现文件系统、哈希表和邻接表。</p><p>这是链表内部结构的展示：</p><p>链表包括以下类型：</p><p>单链表（单向） 双向链表（双向）</p><p>链表的基本操作：</p><p>InsertAtEnd - 在链表的末尾插入指定元素 InsertAtHead - 在链接列表的开头/头部插入指定元素 Delete - 从链接列表中删除指定元素 DeleteAtHead - 删除链接列表的第一个元素 Search - 从链表中返回指定元素 isEmpty - 如果链表为空，则返回true</p><p>面试中关于链表的常见问题</p><p>反转链表 检测链表中的循环 返回链表倒数第N个节点 删除链表中的重复项</p><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p>树形结构是一种层级式的数据结构，由顶点（节点）和连接它们的边组成。 树类似于图，但区分树和图的重要特征是树中不存在环路。</p><p>树形结构被广泛应用于人工智能和复杂算法，它可以提供解决问题的有效存储机制。</p><p>这是一个简单树的示意图，以及树数据结构中使用的基本术语：</p><p>Root - 根节点</p><p>Parent - 父节点</p><p>Child - 子节点</p><p>Leaf - 叶子节点</p><p>Sibling - 兄弟节点</p><p>以下是树形结构的主要类型：</p><p>N元树 平衡树 二叉树 二叉搜索树 AVL树 红黑树 2-3树</p><p>其中，二叉树和二叉搜索树是最常用的树。</p><p>面试中关于树结构的常见问题：</p><p>求二叉树的高度 在二叉搜索树中查找第k个最大值 查找与根节点距离k的节点 在二叉树中查找给定节点的祖先节点</p><p>字典树（Trie）</p><p>字典树，也称为“前缀树”，是一种特殊的树状数据结构，对于解决字符串相关问题非常有效。它能够提供快速检索，主要用于搜索字典中的单词，在搜索引擎中自动提供建议，甚至被用于IP的路由。</p><p>这些单词以顶部到底部的方式存储，其中绿色节点“p”，“s”和“r”分别表示“top”，“thus”和“theirs”的底部。</p><p>面试中关于字典树的常见问题</p><p>计算字典树中的总单词数 打印存储在字典树中的所有单词 使用字典树对数组的元素进行排序 使用字典树从字典中形成单词 构建T9字典（字典树+ DFS ）</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于数据结构&quot;&gt;&lt;a href=&quot;#关于数据结构&quot; class=&quot;headerlink&quot; title=&quot;关于数据结构&quot;&gt;&lt;/a&gt;关于数据结构&lt;/h1&gt;&lt;p&gt;什么是数据结构？&lt;/p&gt;
&lt;p&gt;简单地说，数据结构是以某种特定的布局方式存储数据的容器。这种“布局方式”决定了数据结构对于某些操作是高效的，而对于其他操作则是低效的。首先我们需要理解各种数据结构，才能在处理实际问题时选取最合适的数据结构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://Sun-JunYu.github.io/categories/python/"/>
    
    
      <category term="python基础" scheme="https://Sun-JunYu.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python内置的内存管理机制</title>
    <link href="https://sun-junyu.github.io/posts/89986499/"/>
    <id>https://sun-junyu.github.io/posts/89986499/</id>
    <published>2020-02-22T16:00:00.000Z</published>
    <updated>2020-04-21T06:11:37.104Z</updated>
    
    <content type="html"><![CDATA[<p>在Python中是如何管理内存的<br>Python有一个私有堆空间来保存所有的对象和数据结构。作为开发者，我们无法访问它，是解释器在管理它。但是有了核心API后，我们可以访问一些工具。Python内存管理器控制内存分配。</p><a id="more"></a><p>另外，内置垃圾回收器会回收使用所有的未使用内存，所以使其适用于堆空间。</p><p>一、垃圾回收：python不像C++，Java等语言一样，他们可以不用事先声明变量类型而直接对变量进行赋值。对Python语言来讲，对象的类型和内存都是在运行时确定的。这也是为什么我们称Python语言为动态类型的原因(这里我们把动态类型可以简单的归结为对变量内存地址的分配是在运行时自动判断变量类型并对变量进行赋值)。</p><p>二、引用计数：Python采用了类似Windows内核对象一样的方式来对内存进行管理。每一个对象，都维护这一个对指向该对对象的引用的计数。当变量被绑定在一个对象上的时候，该变量的引用计数就是1，(还有另外一些情况也会导致变量引用计数的增加),系统会自动维护这些标签，并定时扫描，当某标签的引用计数变为0的时候，该对就会被回收。</p><p>1 对象存储</p><p>在Python中万物皆对象</p><p>不存在基本数据类型，0, 1.2, True, False, “abc”等，这些全都是对象</p><p>所有对象, 都会在内存中开辟一块空间进行存储</p><p>2.1 会根据不同的类型以及内容, 开辟不同的空间大小进行存储 2.2 返回该空间的地址给外界接收(称为”引用”), 用于后续对这个对象的操作 2.3 可通过 id() 函数获取内存地址(10进制) 2.4 通过 hex() 函数可以查看对应的16进制地址</p><p>class Person:<br>    pass</p><p>p = Person()<br>print(p)<br>print(id(p))<br>print(hex(id(p)))</p><blockquote><blockquote><blockquote><blockquote><p>打印结果</p></blockquote></blockquote></blockquote></blockquote><p>&lt;<strong>main</strong>.Person object at 0x107030470&gt;<br>4412605552<br>0x107030470<br>对于整数和短小的字符, Python会进行缓存; 不会创建多个相同对象</p><p>此时, 被多次赋值, 只会有多份引用</p><p>num1 = 2<br>num2 = 2<br>print(id(num1), id(num2))</p><blockquote><blockquote><blockquote><blockquote><p>打印结果</p></blockquote></blockquote></blockquote></blockquote><p>4366584464 4366584464<br>容器对象, 存储的其他对象, 仅仅是其他对象的引用, 并不是其他对象本身</p><p>4.1 比如字典, 列表, 元组这些”容器对象” 4.2 全局变量是由一个大字典进行引用 4.3 可通过 global() 查看</p><p>2 对象回收 2.1 引用计数器 2.1.1概念</p><p>一个对象, 会记录着自身被引用的个数 每增加一个引用, 这个对象的引用计数会自动+1 每减少一个引用, 这个对象的引用计数会自动-1</p><p>引用计数+1场景</p><p>1、对象被创建<br>    p1 = Person()<br>2、对象被引用<br>    p2 = p1<br>3、对象被作为参数，传入到一个函数中<br>    log(p1)<br>    这里注意会+2, 因为内部有两个属性引用着这个参数<br>4、对象作为一个元素，存储在容器中<br>    l = [p1]<br>引用计数-1场景</p><p>1、对象的别名被显式销毁<br>    del p1<br>2、对象的别名被赋予新的对象<br>    p1 = 123<br>3、一个对象离开它的作用域<br>    一个函数执行完毕时<br>    内部的局部变量关联的对象, 它的引用计数就会-1<br>4、对象所在的容器被销毁，或从容器中删除对象<br>查看引用计数</p><p>import sys</p><p>class Person:<br>    pass</p><p>p1 = Person() # 1</p><p>print(sys.getrefcount(p1)) # 2</p><p>p2 = p1 # 2</p><p>print(sys.getrefcount(p1)) # 3</p><p>del p2 # 1<br>print(sys.getrefcount(p1)) # 2</p><p>del p1<br>print(sys.getrefcount(p1)) #error，因为上一行代码执行类p1对象已经销毁</p><blockquote><blockquote><blockquote><blockquote><p>打印结果</p></blockquote></blockquote></blockquote></blockquote><p>2<br>3<br>2<br>循环引用</p><p>循环引用<br>class Person:<br>    pass</p><p>class Dog:<br>    pass</p><p>p = Person()<br>d = Dog()   </p><p>p.pet = d<br>d.master = p<br>对象间互相引用，导致对象不能通过引用计数器进行销毁</p><p>手动触发垃圾回收，挥手循环引用</p><p>import objgraph<br>import gc</p><p>class Person:<br>    pass</p><p>class Dog:<br>    pass</p><p>p = Person()<br>d = Dog()</p><p>p.pet = d<br>d.master = p</p><p>del p<br>del d</p><p>gc.collect() #手动触发垃圾回收</p><p>print(objgraph.count(“Person”))<br>print(objgraph.count(“Dog”))</p><blockquote><blockquote><blockquote><blockquote><p>打印结果<br>0<br>0</p></blockquote></blockquote></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Python中是如何管理内存的&lt;br&gt;Python有一个私有堆空间来保存所有的对象和数据结构。作为开发者，我们无法访问它，是解释器在管理它。但是有了核心API后，我们可以访问一些工具。Python内存管理器控制内存分配。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://Sun-JunYu.github.io/categories/python/"/>
    
    
      <category term="python基础" scheme="https://Sun-JunYu.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>如何使用python+Vue.js+Django上传文件到七牛云</title>
    <link href="https://sun-junyu.github.io/posts/ac1d54ea/"/>
    <id>https://sun-junyu.github.io/posts/ac1d54ea/</id>
    <published>2020-02-22T16:00:00.000Z</published>
    <updated>2020-04-21T06:15:12.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用python-Vue-js-Django异步前端通过api上传文件到七牛云"><a href="#使用python-Vue-js-Django异步前端通过api上传文件到七牛云" class="headerlink" title="使用python+Vue.js+Django异步前端通过api上传文件到七牛云"></a>使用python+Vue.js+Django异步前端通过api上传文件到七牛云</h1><p>​    首先注册七牛云：qiniu.com，进入你的七牛云账号，打开秘钥页，记录下你的ak和sk</p><a id="more"></a><p>​    <img src="https://v3u.cn/v3u/Public/js/editor/attached/image/20191215/20191215131202_22383.png" alt="img"></p><p>​    随后新建一个云存储空间，这里空间名字一定要记录一下：</p><p>​    <img src="https://v3u.cn/v3u/Public/js/editor/attached/image/20191215/20191215131239_52781.png" alt="img"></p><p>​    此时我们用django写一个获取uptoken的接口，使用drf框架来写，注意别忘了安装七牛云扩展 pip install qiniu</p><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#七牛云token</span><br><span class="line">from qiniu import Auth</span><br><span class="line">class QiNiu(APIView):</span><br><span class="line">    def get(self,request):</span><br><span class="line">        q &#x3D; Auth(&#39;E2IZM3koC1GR1DUqJHactmixzdyZZhx0edBKqDsk&#39;,&#39;GDnMkvRoE_kFhCSuvdqQj0VcNsRDOHzYJJ_bVd0_&#39;)</span><br><span class="line">        token &#x3D; q.upload_token(&#39;redinnovation&#39;)</span><br><span class="line">        print(token)</span><br><span class="line">        res &#x3D; &#123;&#125;</span><br><span class="line">        res[&#39;uptoken&#39;] &#x3D; token</span><br><span class="line"></span><br><span class="line">        return Response(res)</span><br></pre></td></tr></table></figure><p>​    访问django服务，确保每一次都会生成新的token,访问<a href="http://localhost:8000/uptoken/">http://localhost:8000/uptoken/</a></p><p>​    <img src="https://v3u.cn/v3u/Public/js/editor/attached/image/20200224/20200224074610_64132.png" alt="img"></p><p>​        接口已经调试好，回到vue.js页面，添加一个上传控件</p><p>​        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; imgLoadPercent &#125;&#125;</span><br><span class="line"></span><br><span class="line"> &lt;input @change&#x3D;&quot;uploadInputchange&quot;  id&#x3D;&quot;uploadFileInput&quot; type&#x3D;&quot;file&quot; &gt;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">          uptoken:&#39;&#39;,</span><br><span class="line">        imgLoadPercent:&#39;&#39;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​     然后在methods里添加几个方法：</p><p>​     </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">get_token()&#123;</span><br><span class="line"></span><br><span class="line">         this.axios.get(&#39;http:&#x2F;&#x2F;localhost:8000&#x2F;uptoken&#x2F;&#39;).then((result) &#x3D;&gt;&#123;</span><br><span class="line">        console.log(result);</span><br><span class="line">        this.uptoken &#x3D; result.data.uptoken;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#x2F;&#x2F;触发input change事件</span><br><span class="line">    uploadInputchange()&#123;</span><br><span class="line">        let file &#x3D; document.getElementById(&quot;uploadFileInput&quot;).files[0];   &#x2F;&#x2F;选择的图片文件</span><br><span class="line">        this.get_token();</span><br><span class="line">        this.uploadImgToQiniu(file);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;上传图片到七牛</span><br><span class="line">    uploadImgToQiniu(file)&#123;</span><br><span class="line"></span><br><span class="line">        console.log(this.uptoken);</span><br><span class="line"></span><br><span class="line">        const axiosInstance &#x3D; this.axios.create(&#123;withCredentials: false&#125;);    &#x2F;&#x2F;withCredentials 禁止携带cookie，带cookie在七牛上有可能出现跨域问题</span><br><span class="line">        let data &#x3D; new FormData();</span><br><span class="line">        data.append(&#39;token&#39;,this.uptoken);     &#x2F;&#x2F;七牛需要的token</span><br><span class="line">        data.append(&#39;file&#39;, file);</span><br><span class="line">        axiosInstance(&#123;</span><br><span class="line">            method: &#39;POST&#39;,</span><br><span class="line">            url: &#39;http:&#x2F;&#x2F;up-z1.qiniu.com&#x2F;&#39;,  &#x2F;&#x2F;上传地址，华北的空间是up-z1.qiniu.com</span><br><span class="line">            data: data,</span><br><span class="line">            timeout:30000,      &#x2F;&#x2F;超时时间，因为图片上传有可能需要很久</span><br><span class="line">            onUploadProgress: (e)&#x3D;&gt; &#123;</span><br><span class="line">                &#x2F;&#x2F;imgLoadPercent 是上传进度，可以用来添加进度条</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                var complete &#x3D; (e.loaded &#x2F; e.total);</span><br><span class="line"></span><br><span class="line">                if (complete &lt; 1) &#123;</span><br><span class="line">                </span><br><span class="line">                    this.imgLoadPercent &#x3D; (complete *100).toFixed(2)+ &#39;%&#39;;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;).then(data &#x3D;&gt;&#123;</span><br><span class="line">           console.log(data);</span><br><span class="line">           this.imgLoadPercent &#x3D; &#39;100%&#39;;</span><br><span class="line">        &#125;).catch(function(err) &#123;</span><br><span class="line">            &#x2F;&#x2F;上传失败</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    最后，如果上传成功后，七牛云接口会返回文件的key</p><p>​    <img src="https://v3u.cn/v3u/Public/js/editor/attached/image/20200224/20200224075423_85752.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用python-Vue-js-Django异步前端通过api上传文件到七牛云&quot;&gt;&lt;a href=&quot;#使用python-Vue-js-Django异步前端通过api上传文件到七牛云&quot; class=&quot;headerlink&quot; title=&quot;使用python+Vue.js+Django异步前端通过api上传文件到七牛云&quot;&gt;&lt;/a&gt;使用python+Vue.js+Django异步前端通过api上传文件到七牛云&lt;/h1&gt;&lt;p&gt;​    首先注册七牛云：qiniu.com，进入你的七牛云账号，打开秘钥页，记录下你的ak和sk&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://Sun-JunYu.github.io/categories/python/"/>
    
      <category term="vue" scheme="https://Sun-JunYu.github.io/categories/python/vue/"/>
    
      <category term="七牛云" scheme="https://Sun-JunYu.github.io/categories/python/vue/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
    
      <category term="python" scheme="https://Sun-JunYu.github.io/tags/python/"/>
    
      <category term="vue" scheme="https://Sun-JunYu.github.io/tags/vue/"/>
    
      <category term="七牛云" scheme="https://Sun-JunYu.github.io/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>加密文章测试</title>
    <link href="https://sun-junyu.github.io/posts/7e709353/"/>
    <id>https://sun-junyu.github.io/posts/7e709353/</id>
    <published>2020-01-21T02:14:11.000Z</published>
    <updated>2020-04-21T10:47:11.031Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟（密码：123456）！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="7c9df5696499b0943b0714a90278edc9cdb12f7962c2949648214eee27e824eb">42401e656a30ed09e8e3b0fbe2fbd18ae1b8c2138de0b629bd1233cbc0cc80918b020088b54c79621b8ef9a9af7b0f06b4f358e8c86ef99d097fb161589581b453752da7da2e21aa4d35b94c835c62d1204ab327d5d9241d6be3c6b4b1e68d3697229826ffa52b53920e92cbe496af209269f803aa7450ba136338b0e891ba54f6fe48d0d23c1ba5b981305fdee3badd054b7ad20712af650adf010b25c3fa117b769979c2ef7a2ccccee14b24ed84530b911e7b68c43d9f4592ba8687b2c7fb</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="private" scheme="https://Sun-JunYu.github.io/categories/private/"/>
    
    
      <category term="加密文章" scheme="https://Sun-JunYu.github.io/tags/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
</feed>
